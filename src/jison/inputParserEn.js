/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var inputParserEn = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,21],$V2=[1,22],$V3=[1,23],$V4=[1,18],$V5=[1,19],$V6=[1,15],$V7=[1,14],$V8=[1,11],$V9=[1,6],$Va=[1,7],$Vb=[1,8],$Vc=[1,9],$Vd=[1,10],$Ve=[1,13],$Vf=[1,17],$Vg=[1,33],$Vh=[1,34],$Vi=[1,49],$Vj=[1,50],$Vk=[1,51],$Vl=[1,52],$Vm=[1,48],$Vn=[1,28],$Vo=[1,32],$Vp=[1,35],$Vq=[1,36],$Vr=[1,37],$Vs=[1,38],$Vt=[1,39],$Vu=[1,40],$Vv=[1,41],$Vw=[1,42],$Vx=[1,43],$Vy=[1,44],$Vz=[1,45],$VA=[1,46],$VB=[8,9,15,16,18,19,20,21,24,28,29,49,51,52,53,60,61,75,76,77,78,79,80,81,82,83,84,85,86,93,94,97,102,103,105],$VC=[1,59],$VD=[1,60],$VE=[8,9,98,99,100,101,105],$VF=[1,64],$VG=[1,65],$VH=[1,66],$VI=[1,67],$VJ=[8,9,49,51,52,53,60,61,93,94,97,98,99,100,101,102,103,105],$VK=[18,19,20,21,24],$VL=[2,45],$VM=[8,9,13,31,33,34,35,36,37,38,39,40,41,49,51,52,53,60,61,93,94,97,98,99,100,101,102,103,105,106],$VN=[8,9,13,18,19,20,21,24,31,33,34,35,36,37,38,39,40,41,49,51,52,53,60,61,75,76,77,78,79,80,81,82,83,84,85,86,93,94,97,98,99,100,101,102,103,105,106],$VO=[8,9,18,19,20,21,24,98,99,100,101,104,105],$VP=[2,46],$VQ=[1,111],$VR=[2,47],$VS=[8,9,13,24,31,33,34,35,36,37,38,39,40,41,49,51,52,53,60,61,93,94,97,98,99,100,101,102,103,104,105,106],$VT=[8,9,98,99,100,101,104,105],$VU=[1,121],$VV=[1,122],$VW=[33,34,35,36,37,38,39,40,41],$VX=[2,142],$VY=[2,143],$VZ=[1,128],$V_=[1,129],$V$=[1,130],$V01=[1,131],$V11=[1,132],$V21=[1,125],$V31=[1,126],$V41=[1,127],$V51=[1,133],$V61=[2,147],$V71=[2,148],$V81=[31,106],$V91=[1,144],$Va1=[8,104,105],$Vb1=[1,169],$Vc1=[1,170],$Vd1=[1,171],$Ve1=[1,172],$Vf1=[1,173],$Vg1=[1,174],$Vh1=[1,175],$Vi1=[1,176],$Vj1=[1,177],$Vk1=[1,178],$Vl1=[8,9,13,31,93,94,95,96,98,99,100,101,104,105],$Vm1=[8,9,93,94,98,99,100,101,104,105],$Vn1=[8,11,49,51,52,53,60,61,93,94,97,98,99,100,101,102,103],$Vo1=[88,89];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"predicate":4,"target":5,"adverbial":6,"remain":7,"EOF":8,"FOR":9,"conditions":10,"LET":11,"FILLER":12,"D":13,"ref":14,"THIS":15,"THAT":16,"shape":17,"RECT":18,"CIRCLE":19,"ARROW":20,"ELEMENT":21,"constValue":22,"color":23,"INPUTTEXT":24,"color_or_not":25,"shape_or_inputText":26,"object":27,"SINGLEONE":28,"IT":29,"objects":30,"AND":31,"attribute":32,"SIZE":33,"HEIGHT":34,"WIDTH":35,"COLOR":36,"TEXT":37,"HORILOC":38,"VERTILOC":39,"LOC":40,"SHAPE":41,"computableAttribute":42,"uncomputableAttribute":43,"doubleAttribute":44,"HORIDIST":45,"VERTIDIST":46,"DISTANCE":47,"adverb":48,"DEEP":49,"BIT":50,"SHALLOW":51,"BIG":52,"SMALL":53,"direction":54,"LEFT":55,"RIGHT":56,"UP":57,"DOWN":58,"ref-loc":59,"HERE":60,"THERE":61,"location":62,"MIDDLE":63,"const":64,"ONE":65,"TWO":66,"THREE":67,"FOUR":68,"FIVE":69,"SIX":70,"SEVEN":71,"EIGHT":72,"NINE":73,"TEN":74,"RED":75,"PINK":76,"PURPLE":77,"BLUE":78,"CYAN":79,"TEAL":80,"GREEN":81,"YELLOW":82,"ORANGE":83,"BROWN":84,"GREY":85,"BLUEGREY":86,"value":87,"TIME":88,"FRACTION":89,"DIFF":90,"uncomputableValue":91,"relation":92,"EQUAL":93,"IS":94,"LEQ":95,"GEQ":96,"AT":97,"NEW":98,"MOVE":99,"CHANGE":100,"COPY":101,"DAO":102,"WANG":103,"ALSO":104,"REMAIN":105,"NOCHANGE":106,"OTHER":107,"$accept":0,"$end":1},
terminals_: {2:"error",8:"EOF",9:"FOR",11:"LET",13:"D",15:"THIS",16:"THAT",18:"RECT",19:"CIRCLE",20:"ARROW",21:"ELEMENT",24:"INPUTTEXT",28:"SINGLEONE",29:"IT",31:"AND",33:"SIZE",34:"HEIGHT",35:"WIDTH",36:"COLOR",37:"TEXT",38:"HORILOC",39:"VERTILOC",40:"LOC",41:"SHAPE",45:"HORIDIST",46:"VERTIDIST",47:"DISTANCE",49:"DEEP",50:"BIT",51:"SHALLOW",52:"BIG",53:"SMALL",55:"LEFT",56:"RIGHT",57:"UP",58:"DOWN",60:"HERE",61:"THERE",63:"MIDDLE",65:"ONE",66:"TWO",67:"THREE",68:"FOUR",69:"FIVE",70:"SIX",71:"SEVEN",72:"EIGHT",73:"NINE",74:"TEN",75:"RED",76:"PINK",77:"PURPLE",78:"BLUE",79:"CYAN",80:"TEAL",81:"GREEN",82:"YELLOW",83:"ORANGE",84:"BROWN",85:"GREY",86:"BLUEGREY",88:"TIME",89:"FRACTION",90:"DIFF",93:"EQUAL",94:"IS",95:"LEQ",96:"GEQ",97:"AT",98:"NEW",99:"MOVE",100:"CHANGE",101:"COPY",102:"DAO",103:"WANG",104:"ALSO",105:"REMAIN",106:"NOCHANGE",107:"OTHER"},
productions_: [0,[3,5],[3,3],[3,7],[3,6],[3,5],[3,4],[3,8],[3,6],[3,8],[3,6],[3,5],[3,7],[3,5],[3,7],[3,6],[3,5],[3,4],[3,8],[3,6],[3,5],[3,7],[3,4],[3,6],[3,5],[3,4],[3,3],[3,7],[3,5],[3,7],[3,5],[3,4],[3,6],[12,1],[12,0],[14,1],[14,1],[17,1],[17,1],[17,1],[17,1],[22,1],[22,1],[22,1],[25,1],[25,0],[26,1],[26,1],[26,2],[27,3],[27,3],[27,2],[27,1],[27,1],[27,1],[30,3],[30,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[42,1],[42,1],[42,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[44,1],[44,1],[44,1],[48,2],[48,2],[48,2],[48,2],[54,1],[54,1],[54,1],[54,1],[59,1],[59,1],[62,1],[62,1],[62,3],[62,5],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[87,4],[87,4],[87,5],[87,5],[87,5],[87,2],[91,2],[92,3],[92,3],[92,3],[92,3],[92,5],[92,3],[92,3],[4,1],[4,1],[4,1],[4,1],[5,1],[5,2],[5,5],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[10,3],[10,1],[7,3],[7,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log({"type": "simple", "predicate": $$[$0-4], "target": $$[$0-3], "adverbial": $$[$0-2], "conditions": undefined, "remain": $$[$0-1]});
          return {"type": "simple", "predicate": $$[$0-4], "target": $$[$0-3], "adverbial": $$[$0-2], "conditions": undefined, "remain": $$[$0-1]}; 
break;
case 2:
 console.log({"type": "simple", "predicate": $$[$0-2], "adverbial": $$[$0-1], "conditions": undefined, "remain": $$[$0]});
          return {"type": "simple", "predicate": $$[$0-2], "target": {"obj": {"type": "", "adj": [], "pos": _$[$0-2].first_column, "end": _$[$0-2].last_column}, "type": "single", "val": "loc"}, "adverbial": $$[$0-1], "conditions": undefined, "remain": undefined}; 
break;
case 3:
 console.log({"type": "simple", "predicate": $$[$0-6], "target": $$[$0-5], "adverbial": $$[$0-4], "conditions": $$[$0-2], "remain": $$[$0-1]});
          return {"type": "simple", "predicate": $$[$0-6], "target": $$[$0-5], "adverbial": $$[$0-4], "conditions": $$[$0-2], "remain": $$[$0-1]}; 
break;
case 4:
 console.log({"type": "simple", "predicate": $$[$0-5], "target": $$[$0-4], "adverbial": undefined, "conditions": $$[$0-2], "remain": $$[$0-1]});
          return {"type": "simple", "predicate": $$[$0-5], "target": $$[$0-4], "adverbial": undefined, "conditions": $$[$0-2], "remain": $$[$0-1]}; 
break;
case 5:
 console.log({"type": "simple", "predicate": $$[$0-4], "target": undefined, "adverbial": undefined, "conditions": $$[$0-2], "remain": $$[$0-1]});
          return {"type": "simple", "predicate": $$[$0-4], "target": undefined, "adverbial": undefined, "conditions": $$[$0-2], "remain": $$[$0-1]}; 
break;
case 6:
 console.log({"type": "simple", "predicate": $$[$0-3], "target": $$[$0-2], "adverbial": undefined, "conditions": undefined, "remain": $$[$0-1]});
          return {"type": "simple", "predicate": $$[$0-3], "target": $$[$0-2], "adverbial": undefined, "conditions": undefined, "remain": $$[$0-1]}; 
break;
case 7:
 console.log({"type": "simple", "predicate": $$[$0-5], "target": $$[$0-6], "adverbial": $$[$0-4], "conditions": $$[$0-2], "remain": $$[$0-1]});
          return {"type": "simple", "predicate": $$[$0-5], "target": $$[$0-6], "adverbial": $$[$0-4], "conditions": $$[$0-2], "remain": $$[$0-1]}; 
break;
case 8:
 console.log({"type": "simple", "predicate": $$[$0-3], "target": $$[$0-4], "adverbial": $$[$0-2], "conditions": undefined, "remain": $$[$0-1]});
          return {"type": "simple", "predicate": $$[$0-3], "target": $$[$0-4], "adverbial": $$[$0-2], "conditions": undefined, "remain": $$[$0-1]}; 
break;
case 9:
 console.log({"type": "simple", "predicate": $$[$0-4], "target": $$[$0-6], "adverbial": $$[$0-5], "conditions": $$[$0-2], "remain": $$[$0-1]});
          return {"type": "simple", "predicate": $$[$0-4], "target": $$[$0-6], "adverbial": $$[$0-5], "conditions": $$[$0-2], "remain": $$[$0-1]}; 
break;
case 10:
 console.log({"type": "simple", "predicate": $$[$0-2], "target": $$[$0-4], "adverbial": $$[$0-3], "conditions": undefined, "remain": $$[$0-1]});
          return {"type": "simple", "predicate": $$[$0-2], "target": $$[$0-4], "adverbial": $$[$0-3], "conditions": undefined, "remain": $$[$0-1]}; 
break;
case 11:
 console.log({"type": "simple", "predicate": $$[$0-3], "target": $$[$0-2], "adverbial": $$[$0-4], "conditions": undefined, "remain": $$[$0-1]});
          return {"type": "simple", "predicate": $$[$0-3], "target": $$[$0-2], "adverbial": $$[$0-4], "conditions": undefined, "remain": $$[$0-1]}; 
break;
case 12:
 console.log({"type": "simple", "predicate": $$[$0-5], "target": $$[$0-4], "adverbial": $$[$0-6], "conditions": $$[$0-2], "remain": $$[$0-1]});
          return {"type": "simple", "predicate": $$[$0-5], "target": $$[$0-4], "adverbial": $$[$0-6], "conditions": $$[$0-2], "remain": $$[$0-1]}; 
break;
case 13:
 console.log({"type": "simple", "predicate": $$[$0-3], "target": $$[$0-2], "adverbial": $$[$0-1], "conditions": undefined, "remain": $$[$0-4]});
          return {"type": "simple", "predicate": $$[$0-3], "target": $$[$0-2], "adverbial": $$[$0-1], "conditions": undefined, "remain": $$[$0-4]}; 
break;
case 14:
 console.log({"type": "simple", "predicate": $$[$0-5], "target": $$[$0-4], "adverbial": $$[$0-3], "conditions": $$[$0-1], "remain": $$[$0-6]});
          return {"type": "simple", "predicate": $$[$0-5], "target": $$[$0-4], "adverbial": $$[$0-3], "conditions": $$[$0-1], "remain": $$[$0-6]}; 
break;
case 15:
 console.log({"type": "simple", "predicate": $$[$0-4], "target": $$[$0-3], "adverbial": undefined, "conditions": $$[$0-1], "remain": $$[$0-5]});
          return {"type": "simple", "predicate": $$[$0-4], "target": $$[$0-3], "adverbial": undefined, "conditions": $$[$0-1], "remain": $$[$0-5]}; 
break;
case 16:
 console.log({"type": "simple", "predicate": $$[$0-3], "target": undefined, "adverbial": undefined, "conditions": $$[$0-1], "remain": $$[$0-4]});
          return {"type": "simple", "predicate": $$[$0-3], "target": undefined, "adverbial": undefined, "conditions": $$[$0-1], "remain": $$[$0-4]}; 
break;
case 17:
 console.log({"type": "simple", "predicate": $$[$0-2], "target": $$[$0-1], "adverbial": undefined, "conditions": undefined, "remain": $$[$0-3]});
          return {"type": "simple", "predicate": $$[$0-2], "target": $$[$0-1], "adverbial": undefined, "conditions": undefined, "remain": $$[$0-3]}; 
break;
case 18:
 console.log({"type": "simple", "predicate": $$[$0-4], "target": $$[$0-5], "adverbial": $$[$0-3], "conditions": $$[$0-1], "remain": $$[$0-7]});
          return {"type": "simple", "predicate": $$[$0-4], "target": $$[$0-5], "adverbial": $$[$0-3], "conditions": $$[$0-1], "remain": $$[$0-7]}; 
break;
case 19:
 console.log({"type": "simple", "predicate": $$[$0-2], "target": $$[$0-3], "adverbial": $$[$0-1], "conditions": undefined, "remain": $$[$0-5]});
          return {"type": "simple", "predicate": $$[$0-2], "target": $$[$0-3], "adverbial": $$[$0-1], "conditions": undefined, "remain": $$[$0-5]}; 
break;
case 20:
 console.log({"type": "simple", "predicate": $$[$0-2], "target": $$[$0-1], "adverbial": $$[$0-3], "conditions": undefined, "remain": $$[$0-4]});
          return {"type": "simple", "predicate": $$[$0-2], "target": $$[$0-1], "adverbial": $$[$0-3], "conditions": undefined, "remain": $$[$0-4]}; 
break;
case 21:
 console.log({"type": "simple", "predicate": $$[$0-4], "target": $$[$0-3], "adverbial": $$[$0-5], "conditions": $$[$0-1], "remain": $$[$0-6]});
          return {"type": "simple", "predicate": $$[$0-4], "target": $$[$0-3], "adverbial": $$[$0-5], "conditions": $$[$0-1], "remain": $$[$0-6]}; 
break;
case 22:
 console.log({"type": "simple", "predicate": $$[$0-3], "target": $$[$0-2], "adverbial": $$[$0-1], "conditions": undefined, "remain": undefined});
          return {"type": "simple", "predicate": $$[$0-3], "target": $$[$0-2], "adverbial": $$[$0-1], "conditions": undefined, "remain": undefined}; 
break;
case 23:
 console.log({"type": "simple", "predicate": $$[$0-5], "target": $$[$0-4], "adverbial": $$[$0-3], "conditions": $$[$0-1], "remain": undefined});
          return {"type": "simple", "predicate": $$[$0-5], "target": $$[$0-4], "adverbial": $$[$0-3], "conditions": $$[$0-1], "remain": undefined}; 
break;
case 24:
 console.log({"type": "simple", "predicate": $$[$0-4], "target": $$[$0-3], "adverbial": undefined, "conditions": $$[$0-1], "remain": undefined});
          return {"type": "simple", "predicate": $$[$0-4], "target": $$[$0-3], "adverbial": undefined, "conditions": $$[$0-1], "remain": undefined}; 
break;
case 25:
 console.log({"type": "simple", "predicate": $$[$0-3], "target": undefined, "adverbial": undefined, "conditions": $$[$0-1], "remain": undefined});
          return {"type": "simple", "predicate": $$[$0-3], "target": undefined, "adverbial": undefined, "conditions": $$[$0-1], "remain": undefined}; 
break;
case 26:
 console.log({"type": "simple", "predicate": $$[$0-2], "target": $$[$0-1], "adverbial": undefined, "conditions": undefined, "remain": undefined});
          return {"type": "simple", "predicate": $$[$0-2], "target": $$[$0-1], "adverbial": undefined, "conditions": undefined, "remain": undefined}; 
break;
case 27:
 console.log({"type": "simple", "predicate": $$[$0-4], "target": $$[$0-5], "adverbial": $$[$0-3], "conditions": $$[$0-1], "remain": undefined});
          return {"type": "simple", "predicate": $$[$0-4], "target": $$[$0-5], "adverbial": $$[$0-3], "conditions": $$[$0-1], "remain": undefined}; 
break;
case 28:
 console.log({"type": "simple", "predicate": $$[$0-2], "target": $$[$0-3], "adverbial": $$[$0-1], "conditions": undefined, "remain": undefined});
          return {"type": "simple", "predicate": $$[$0-2], "target": $$[$0-3], "adverbial": $$[$0-1], "conditions": undefined, "remain": undefined}; 
break;
case 29:
 console.log({"type": "simple", "predicate": $$[$0-3], "target": $$[$0-5], "adverbial": $$[$0-4], "conditions": $$[$0-1], "remain": undefined});
          return {"type": "simple", "predicate": $$[$0-3], "target": $$[$0-5], "adverbial": $$[$0-4], "conditions": $$[$0-1], "remain": undefined}; 
break;
case 30:
 console.log({"type": "simple", "predicate": $$[$0-1], "target": $$[$0-3], "adverbial": $$[$0-2], "conditions": undefined, "remain": undefined});
          return {"type": "simple", "predicate": $$[$0-1], "target": $$[$0-3], "adverbial": $$[$0-2], "conditions": undefined, "remain": undefined}; 
break;
case 31:
 console.log({"type": "simple", "predicate": $$[$0-2], "target": $$[$0-1], "adverbial": $$[$0-3], "conditions": undefined, "remain": undefined});
          return {"type": "simple", "predicate": $$[$0-2], "target": $$[$0-1], "adverbial": $$[$0-3], "conditions": undefined, "remain": undefined}; 
break;
case 32:
 console.log({"type": "simple", "predicate": $$[$0-4], "target": $$[$0-3], "adverbial": $$[$0-5], "conditions": $$[$0-1], "remain": undefined});
          return {"type": "simple", "predicate": $$[$0-4], "target": $$[$0-3], "adverbial": $$[$0-5], "conditions": $$[$0-1], "remain": undefined}; 
break;
case 35: case 36:
this.$ = "ref"
break;
case 37:
 this.$ = "rect" 
break;
case 38:
 this.$ = "circle" 
break;
case 39:
 this.$ = "arrow" 
break;
case 40:
 this.$ = "" 
break;
case 41: case 44:
this.$ = {"type": "color", "val": $$[$0]};
break;
case 42:
this.$ = {"type": "shape", "val": $$[$0]};
break;
case 43:
this.$ = {"type": "text", "val": $$[$0]};
break;
case 45:
this.$ = "";
break;
case 46:
this.$ = [{"type": "shape", "val": $$[$0]}];
break;
case 47:
this.$ = [{"type": "text", "val": $$[$0]}];
break;
case 48:
this.$ = [{"type": "shape", "val": $$[$0-1]}, {"type": "text", "val": $$[$0]}];
break;
case 49:
$$[$0].push($$[$0-1]);
         this.$ = {"type": "", "adj": $$[$0], "pos": _$[$0-2].first_column, "end": _$[$0].last_column};
break;
case 50:
$$[$0].push($$[$0-1]);
         this.$ = {"type": $$[$0-2], "adj": $$[$0], "pos": _$[$0-2].first_column, "end": _$[$0].last_column};
break;
case 51:
$$[$0].push({"type": "color", "val": $$[$0-1]});
         this.$ = {"type": "", "adj": $$[$0], "pos": _$[$0-1].first_column, "end": _$[$0].last_column};
break;
case 52:
this.$ = {"type": "", "adj": $$[$0], "pos": _$[$0].first_column, "end": _$[$0].last_column};
break;
case 53:
this.$ = {"type": "it", "adj": [], "pos": _$[$0].first_column, "end": _$[$0].last_column};
break;
case 54:
this.$ = {"type": $$[$0], "adj": [], "pos": _$[$0].first_column, "end": _$[$0].last_column};
break;
case 55:

         $$[$0-2].push($$[$0]);
         this.$ = $$[$0-2];
        
break;
case 56:
this.$ = [$$[$0]];
break;
case 57: case 69:
this.$ = "size"
break;
case 58: case 70:
this.$ = "height"
break;
case 59: case 71:
this.$ = "width"
break;
case 60: case 72:
this.$ = "color"
break;
case 61: case 73:
this.$ = "text"
break;
case 62:
this.$ = "horiloc"
break;
case 63:
this.$ = "vertiloc"
break;
case 64: case 68:
this.$ = "loc"
break;
case 65: case 74:
this.$ = "shape"
break;
case 66:
this.$ = "x"
break;
case 67:
this.$ = "y"
break;
case 75:
this.$ = "horidist"
break;
case 76:
this.$ = "vertidist"
break;
case 77:
this.$ = "dist"
break;
case 78:
this.$ = "deep"
break;
case 79:
this.$ = "shallow"
break;
case 80:
this.$ = "big"
break;
case 81:
this.$ = "small"
break;
case 82:
this.$ = "left"
break;
case 83:
this.$ = "right"
break;
case 84:
this.$ = "up"
break;
case 85:
this.$ = "down"
break;
case 86: case 88:
this.$ = {"loc": "here", "type": "ref", "pos": _$[$0].first_column, "end": _$[$0].last_column}
break;
case 87: case 89:
this.$ = {"loc": "there", "type": "ref", "pos": _$[$0].first_column, "end": _$[$0].last_column}
break;
case 90:
this.$ = {"obj": $$[$0-2], "type": "single", "direction": $$[$0]}
break;
case 91:
this.$ = {"obj_1": $$[$0-4], "obj_2": $$[$0-2], "type": "double", "loc": "middle"}
break;
case 92:
this.$ = 1
break;
case 93:
this.$ = 2
break;
case 94:
this.$ = 3
break;
case 95:
this.$ = 4
break;
case 96:
this.$ = 5
break;
case 97:
this.$ = 6
break;
case 98:
this.$ = 7
break;
case 99:
this.$ = 8
break;
case 100:
this.$ = 9
break;
case 101:
this.$ = 10
break;
case 102:
 this.$ = "red" 
break;
case 103:
 this.$ = "pink" 
break;
case 104:
 this.$ = "purple" 
break;
case 105:
 this.$ = "blue" 
break;
case 106:
 this.$ = "cyan" 
break;
case 107:
 this.$ = "teal" 
break;
case 108:
 this.$ = "green" 
break;
case 109:
 this.$ = "yellow" 
break;
case 110:
 this.$ = "orange" 
break;
case 111:
 this.$ = "brown" 
break;
case 112:
 this.$ = "grey" 
break;
case 113:
 this.$ = "bluegrey" 
break;
case 114:
this.$ = {"val": $$[$0-3], "const": $$[$0-1], "type": "time"};
break;
case 115:
this.$ = {"val": $$[$0-3], "const": $$[$0-1], "type": "fraction"};
break;
case 116:
this.$ = {"val_1": $$[$0-4], "val_2": $$[$0-2], "type": "diff"};
break;
case 117:
this.$ = {"val_1": $$[$0-4], "val_2": $$[$0-2], "type": "sum"};
break;
case 118:
this.$ = {"val_1": $$[$0-4], "val_2": $$[$0-2], "type": "middle"};
break;
case 119: case 120: case 133:
this.$ = {"obj": $$[$0-1], "type": "single", "val": $$[$0]};
break;
case 121: case 122:
this.$ = {"type": "equation", "val_1": $$[$0-2], "val_2": $$[$0], "op": "="};
break;
case 123:
this.$ = {"type": "equation", "val_1": $$[$0-2], "val_2": $$[$0], "op": "<"};
break;
case 124:
this.$ = {"type": "equation", "val_1": $$[$0-2], "val_2": $$[$0], "op": ">"};
break;
case 125:
this.$ = {"type": "direction", "obj_1": $$[$0-4], "obj_2": $$[$0-2], "direction": $$[$0]};
break;
case 126:
this.$ = {"type": "assignment", "left_value": $$[$0-2], "right_value": $$[$0]};
break;
case 127:
this.$ = {"type": "assignment-eq", "left_value": $$[$0-2], "right_value": $$[$0]};
break;
case 128:
this.$ = "new";
break;
case 129:
this.$ = "move";
break;
case 130:
this.$ = "change";
break;
case 131:
this.$ = "copy";
break;
case 132:
this.$ = {"obj": $$[$0], "type": "single", "val": "loc"};
break;
case 134:
this.$ = {"obj_1": $$[$0-4], "obj_2": $$[$0-2], "type": "double", "val": $$[$0]};
break;
case 135: case 136: case 137:
this.$ = {"type": "loc", "loc": $$[$0]};
break;
case 138:
this.$ = {"type": "direction", "direction": $$[$0]};
break;
case 139: case 144:
this.$ = {"type": "computable", "value": $$[$0]};
break;
case 140: case 145:
this.$ = {"type": "uncomputable", "value": $$[$0]};
break;
case 141: case 146:
this.$ = {"type": "color", "value": $$[$0]};
break;
case 142: case 147:
this.$ = {"type": "shape", "value": $$[$0]};
break;
case 143: case 148:
this.$ = {"type": "text", "value": $$[$0]};
break;
case 149:
this.$ = {"type": "adverb", "value": $$[$0]};
break;
case 150:
 $$[$0-2].push($$[$0]);
          this.$ = $$[$0-2]; 
break;
case 151:
 this.$ = [$$[$0]]; 
break;
case 152:
 this.$ = $$[$0-1]; 
break;
case 153:
 this.$ = "other"; 
break;
}
},
table: [{3:1,4:2,6:4,7:5,11:[1,3],48:16,49:$V0,51:$V1,52:$V2,53:$V3,59:12,60:$V4,61:$V5,93:$V6,94:$V7,97:$V8,98:$V9,99:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,105:$Vf},{1:[3]},{5:24,6:25,9:[1,26],14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:27,28:$Vn,29:$Vo,48:16,49:$V0,51:$V1,52:$V2,53:$V3,59:12,60:$V4,61:$V5,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,93:$V6,94:$V7,97:$V8,102:$Vd,103:$Ve},{5:53,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:27,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{4:54,98:$V9,99:$Va,100:$Vb,101:$Vc},{4:55,6:57,11:[1,56],48:16,49:$V0,51:$V1,52:$V2,53:$V3,59:12,60:$V4,61:$V5,93:$V6,94:$V7,97:$V8,98:$V9,99:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve},o($VB,[2,128]),o($VB,[2,129]),o($VB,[2,130]),o($VB,[2,131]),{14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:61,28:$Vn,29:$Vo,60:$VC,61:$VD,62:58,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:61,28:$Vn,29:$Vo,60:$VC,61:$VD,62:62,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},o($VE,[2,137]),{54:63,55:$VF,56:$VG,57:$VH,58:$VI},{14:29,15:$Vg,16:$Vh,17:71,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:70,24:[1,72],26:31,27:73,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:68,91:69},{14:29,15:$Vg,16:$Vh,17:77,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:76,24:[1,78],26:31,27:73,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:74,91:75},o($VE,[2,149]),{14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:81,28:$Vn,29:$Vo,30:79,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,107:[1,80]},o($VE,[2,86]),o($VE,[2,87]),{50:[1,82]},{50:[1,83]},{50:[1,84]},{50:[1,85]},{6:86,7:88,8:[1,89],9:[1,87],48:16,49:$V0,51:$V1,52:$V2,53:$V3,59:12,60:$V4,61:$V5,93:$V6,94:$V7,97:$V8,102:$Vd,103:$Ve,105:$Vf},{8:[1,90]},{10:91,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:94,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:93,91:95,92:92},o($VJ,[2,132],{32:96,31:[1,97],33:[1,98],34:[1,99],35:[1,100],36:[1,101],37:[1,102],38:[1,103],39:[1,104],40:[1,105],41:[1,106]}),o($VK,$VL,{25:107,23:108,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA}),o($VM,[2,54],{23:108,25:109,18:$VL,19:$VL,20:$VL,21:$VL,24:$VL,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA}),{17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,24:$Vm,26:110},o($VM,[2,52]),o($VM,[2,53]),o($VN,[2,35]),o($VN,[2,36]),o($VO,[2,102]),o($VO,[2,103]),o($VO,[2,104]),o($VO,[2,105]),o($VO,[2,106]),o($VO,[2,107]),o($VO,[2,108]),o($VO,[2,109]),o($VO,[2,110]),o($VO,[2,111]),o($VO,[2,112]),o($VO,[2,113]),o($VM,$VP,{24:$VQ}),o($VM,$VR),o($VS,[2,37]),o($VS,[2,38]),o($VS,[2,39]),o($VS,[2,40]),{4:112,6:113,48:16,49:$V0,51:$V1,52:$V2,53:$V3,59:12,60:$V4,61:$V5,93:$V6,94:$V7,97:$V8,98:$V9,99:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve},{5:114,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:27,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{5:115,9:[1,116],14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:27,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{5:117,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:27,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{4:118,98:$V9,99:$Va,100:$Vb,101:$Vc},o($VE,[2,135]),o($VE,[2,88]),o($VE,[2,89]),{13:[1,119],31:[1,120]},o($VE,[2,136]),o($VE,[2,138]),o($VT,[2,82]),o($VT,[2,83]),o($VT,[2,84]),o($VT,[2,85]),o($VE,[2,139],{13:$VU,31:$VV}),o($VE,[2,140]),o($VE,[2,141],{17:47,26:110,18:$Vi,19:$Vj,20:$Vk,21:$Vl,24:$Vm}),o($VW,$VP,{8:$VX,9:$VX,98:$VX,99:$VX,100:$VX,101:$VX,105:$VX,24:$VQ}),o($VW,$VR,{8:$VY,9:$VY,98:$VY,99:$VY,100:$VY,101:$VY,105:$VY}),{33:$VZ,34:$V_,35:$V$,36:$V01,37:$V11,38:$V21,39:$V31,40:$V41,41:$V51,42:123,43:124},o($VE,[2,144],{13:$VU,31:$VV}),o($VE,[2,145]),o($VE,[2,146],{17:47,26:110,18:$Vi,19:$Vj,20:$Vk,21:$Vl,24:$Vm}),o($VW,$VP,{8:$V61,9:$V61,98:$V61,99:$V61,100:$V61,101:$V61,105:$V61,24:$VQ}),o($VW,$VR,{8:$V71,9:$V71,98:$V71,99:$V71,100:$V71,101:$V71,105:$V71}),{31:[1,135],106:[1,134]},{106:[1,136]},o($V81,[2,56]),o($VE,[2,78]),o($VE,[2,79]),o($VE,[2,80]),o($VE,[2,81]),{7:137,8:[1,139],9:[1,138],105:$Vf},{10:140,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:94,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:93,91:95,92:92},{8:[1,141]},{1:[2,26]},{1:[2,2]},{7:142,8:[1,143],104:$V91,105:$Vf},o($Va1,[2,151]),{13:$VU,31:$VV,93:[1,145],94:[1,146],95:[1,147],96:[1,148]},{33:$VZ,34:$V_,35:$V$,36:$V01,37:$V11,38:$V21,39:$V31,40:$V41,41:$V51,42:123,43:124,97:[1,149]},{93:[1,151],94:[1,150]},o($VJ,[2,133]),{14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:152,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},o($VJ,[2,57]),o($VJ,[2,58]),o($VJ,[2,59]),o($VJ,[2,60]),o($VJ,[2,61]),o($VJ,[2,62]),o($VJ,[2,63]),o($VJ,[2,64]),o($VJ,[2,65]),{17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,24:$Vm,26:153},o($VK,[2,44]),{17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,24:$Vm,26:154},o($VM,[2,51]),o($VM,[2,48]),{6:155,48:16,49:$V0,51:$V1,52:$V2,53:$V3,59:12,60:$V4,61:$V5,93:$V6,94:$V7,97:$V8,102:$Vd,103:$Ve},{4:156,98:$V9,99:$Va,100:$Vb,101:$Vc},{7:157,8:[1,159],9:[1,158],105:$Vf},{6:160,8:[1,162],9:[1,161],48:16,49:$V0,51:$V1,52:$V2,53:$V3,59:12,60:$V4,61:$V5,93:$V6,94:$V7,97:$V8,102:$Vd,103:$Ve},{10:163,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:94,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:93,91:95,92:92},{4:164,98:$V9,99:$Va,100:$Vb,101:$Vc},{5:165,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:27,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{54:166,55:$VF,56:$VG,57:$VH,58:$VI},{14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:167,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{64:168,65:$Vb1,66:$Vc1,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,72:$Vi1,73:$Vj1,74:$Vk1},{14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:180,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:179},o($Vl1,[2,119]),o($Vm1,[2,120]),o($Vl1,[2,66]),o($Vl1,[2,67]),o($Vl1,[2,68]),o($Vm1,[2,69]),o($Vm1,[2,70]),o($Vm1,[2,71]),o($Vm1,[2,72]),o($Vm1,[2,73]),o($Vm1,[2,74]),o($Vn1,[2,152]),{14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:181,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},o($Vn1,[2,153]),{8:[1,182]},{10:183,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:94,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:93,91:95,92:92},{1:[2,22]},{7:184,8:[1,185],104:$V91,105:$Vf},{1:[2,6]},{8:[1,186]},{1:[2,25]},{14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:94,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:93,91:95,92:187},{14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:180,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:188},{14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:180,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:189},{14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:180,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:190},{14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:180,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:191},{14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:192,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{17:195,18:$Vi,19:$Vj,20:$Vk,21:$Vl,22:193,23:194,24:[1,196],75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA},{14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:198,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,91:197},{13:[1,199]},o($VM,[2,49]),o($VM,[2,50]),{7:201,8:[1,202],9:[1,200],105:$Vf},{7:204,8:[1,205],9:[1,203],105:$Vf},{8:[1,206]},{10:207,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:94,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:93,91:95,92:92},{1:[2,31]},{8:[1,208],9:[1,209]},{10:210,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:94,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:93,91:95,92:92},{1:[2,17]},{8:[1,211],104:$V91},{6:212,48:16,49:$V0,51:$V1,52:$V2,53:$V3,59:12,60:$V4,61:$V5,93:$V6,94:$V7,97:$V8,102:$Vd,103:$Ve},{8:[1,213],9:[1,214]},o($VE,[2,90]),{13:[1,215]},{88:[1,216],89:[1,217]},o($Vo1,[2,92]),o($Vo1,[2,93]),o($Vo1,[2,94]),o($Vo1,[2,95]),o($Vo1,[2,96]),o($Vo1,[2,97]),o($Vo1,[2,98]),o($Vo1,[2,99]),o($Vo1,[2,100]),o($Vo1,[2,101]),{13:[1,218],31:$VV},{38:$V21,39:$V31,40:$V41,42:123},o($V81,[2,55]),{1:[2,1]},{7:219,8:[1,220],104:$V91,105:$Vf},{8:[1,221]},{1:[2,24]},{1:[2,5]},o($Va1,[2,150]),o($Va1,[2,121],{13:$VU,31:$VV}),o($Va1,[2,122],{13:$VU,31:$VV}),o($Va1,[2,123],{13:$VU,31:$VV}),o($Va1,[2,124],{13:$VU,31:$VV}),{13:[1,222]},o($Va1,[2,126]),o($Va1,[2,41]),o($Va1,[2,42]),o($Va1,[2,43]),o($Va1,[2,127]),{33:$VZ,34:$V_,35:$V$,36:$V01,37:$V11,41:$V51,43:124},{44:223,45:[1,224],46:[1,225],47:[1,226]},{10:227,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:94,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:93,91:95,92:92},{8:[1,228]},{1:[2,28]},{10:229,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:94,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:93,91:95,92:92},{8:[1,230]},{1:[2,30]},{1:[2,11]},{7:231,8:[1,232],104:$V91,105:$Vf},{1:[2,13]},{10:233,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:94,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:93,91:95,92:92},{8:[1,234],104:$V91},{1:[2,16]},{8:[1,236],9:[1,235]},{1:[2,20]},{10:237,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:94,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:93,91:95,92:92},{63:[1,238]},o($Vl1,[2,114]),o($Vl1,[2,115]),{31:[1,240],63:[1,241],64:168,65:$Vb1,66:$Vc1,67:$Vd1,68:$Ve1,69:$Vf1,70:$Vg1,71:$Vh1,72:$Vi1,73:$Vj1,74:$Vk1,90:[1,239]},{8:[1,242]},{1:[2,23]},{1:[2,4]},{54:243,55:$VF,56:$VG,57:$VH,58:$VI},o($VJ,[2,134]),o($VJ,[2,75]),o($VJ,[2,76]),o($VJ,[2,77]),{7:244,8:[1,245],104:$V91,105:$Vf},{1:[2,8]},{7:246,8:[1,247],104:$V91,105:$Vf},{1:[2,10]},{8:[1,248]},{1:[2,32]},{8:[1,249],104:$V91},{1:[2,15]},{10:250,14:29,15:$Vg,16:$Vh,17:47,18:$Vi,19:$Vj,20:$Vk,21:$Vl,23:30,24:$Vm,26:31,27:94,28:$Vn,29:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,86:$VA,87:93,91:95,92:92},{1:[2,19]},{8:[1,251],104:$V91},o($VE,[2,91]),o($Vl1,[2,116]),o($Vl1,[2,117]),o($Vl1,[2,118]),{1:[2,3]},o($Va1,[2,125]),{8:[1,252]},{1:[2,27]},{8:[1,253]},{1:[2,29]},{1:[2,12]},{1:[2,14]},{8:[1,254],104:$V91},{1:[2,21]},{1:[2,7]},{1:[2,9]},{1:[2,18]}],
defaultActions: {89:[2,26],90:[2,2],139:[2,22],141:[2,6],143:[2,25],159:[2,31],162:[2,17],182:[2,1],185:[2,24],186:[2,5],202:[2,28],205:[2,30],206:[2,11],208:[2,13],211:[2,16],213:[2,20],220:[2,23],221:[2,4],228:[2,8],230:[2,10],232:[2,32],234:[2,15],236:[2,19],242:[2,3],245:[2,27],247:[2,29],248:[2,12],249:[2,14],251:[2,21],252:[2,7],253:[2,9],254:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 98
break;
case 2:return 98
break;
case 3:return 99
break;
case 4:return 100
break;
case 5:return 100
break;
case 6:return 101
break;
case 7:return 15
break;
case 8:return 15
break;
case 9:return 15
break;
case 10:return 16
break;
case 11:return 60
break;
case 12:return 61
break;
case 13:return 33
break;
case 14:return 34
break;
case 15:return 35
break;
case 16:return 36
break;
case 17:return 37
break;
case 18:return 37
break;
case 19:return 38
break;
case 20:return 39
break;
case 21:return 38
break;
case 22:return 39
break;
case 23:return 40
break;
case 24:return 45
break;
case 25:return 46
break;
case 26:return 47
break;
case 27:return 93
break;
case 28:return 96
break;
case 29:return 95
break;
case 30:return 49
break;
case 31:return 51
break;
case 32:return 52
break;
case 33:return 53
break;
case 34:return 55
break;
case 35:return 56
break;
case 36:return 57
break;
case 37:return 58
break;
case 38:return 55
break;
case 39:return 56
break;
case 40:return 57
break;
case 41:return 58 
break;
case 42:return 55
break;
case 43:return 56
break;
case 44:return 57
break;
case 45:return 58 
break;
case 46:return 55
break;
case 47:return 56
break;
case 48:return 57
break;
case 49:return 58 
break;
case 50:return 55
break;
case 51:return 56
break;
case 52:return 57
break;
case 53:return 58 
break;
case 54:return 63 
break;
case 55:return 63 
break;
case 56:return 13
break;
case 57:return 31
break;
case 58:return 102
break;
case 59:return 97
break;
case 60:return 103
break;
case 61:return 94
break;
case 62:return 94
break;
case 63:return 94
break;
case 64:return 88
break;
case 65:return 90
break;
case 66:return 9
break;
case 67:return 9
break;
case 68:return 104
break;
case 69:return 75
break;
case 70:return 76
break;
case 71:return 77
break;
case 72:return 78
break;
case 73:return 79
break;
case 74:return 80
break;
case 75:return 81
break;
case 76:return 82
break;
case 77:return 83
break;
case 78:return 84
break;
case 79:return 85
break;
case 80:return 86
break;
case 81:return 28
break;
case 82:return 28
break;
case 83:return 29
break;
case 84:return 41
break;
case 85:return 18
break;
case 86:return 20
break;
case 87:return 19
break;
case 88:return 21
break;
case 89:return 11
break;
case 90:return 50
break;
case 91:return 89
break;
case 92:return 65
break;
case 93:return 66
break;
case 94:return 67
break;
case 95:return 68
break;
case 96:return 69
break;
case 97:return 70
break;
case 98:return 71
break;
case 99:return 72
break;
case 100:return 73
break;
case 101:return 74
break;
case 102:return 105
break;
case 103:return 106
break;
case 104:return 106
break;
case 105:return 107
break;
case 106:return 107
break;
case 107:return 24
break;
case 108:return 'BREAK_LINE'
break;
case 109:return 8
break;
case 110:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:create\b)/,/^(?:new\b)/,/^(?:move\b)/,/^(?:change\b)/,/^(?:改)/,/^(?:copy\b)/,/^(?:its\b)/,/^(?:this\b)/,/^(?:it\b)/,/^(?:that\b)/,/^(?:here\b)/,/^(?:there\b)/,/^(?:size\b)/,/^(?:height\b)/,/^(?:width\b)/,/^(?:color\b)/,/^(?:text\b)/,/^(?:文本)/,/^(?:水平位置)/,/^(?:竖直位置)/,/^(?:横坐标)/,/^(?:纵坐标)/,/^(?:位置)/,/^(?:水平距离)/,/^(?:竖直距离)/,/^(?:距离)/,/^(?:等于)/,/^(?:大于)/,/^(?:小于)/,/^(?:深)/,/^(?:浅)/,/^(?:大)/,/^(?:小)/,/^(?:左边)/,/^(?:右边)/,/^(?:上边)/,/^(?:下边)/,/^(?:左方)/,/^(?:右方)/,/^(?:上方)/,/^(?:下方)/,/^(?:左面)/,/^(?:右面)/,/^(?:上面)/,/^(?:下面)/,/^(?:左侧)/,/^(?:右侧)/,/^(?:上侧)/,/^(?:下侧)/,/^(?:左)/,/^(?:右)/,/^(?:上)/,/^(?:下)/,/^(?:中点)/,/^(?:中间)/,/^(?:的)/,/^(?:和)/,/^(?:到)/,/^(?:在)/,/^(?:往)/,/^(?:to\b)/,/^(?:是)/,/^(?:成)/,/^(?:倍)/,/^(?:差)/,/^(?:so that\b)/,/^(?:使)/,/^(?:且)/,/^(?:red\b)/,/^(?:pink\b)/,/^(?:紫色)/,/^(?:blue\b)/,/^(?:青色)/,/^(?:蓝绿色)/,/^(?:green\b)/,/^(?:黄色)/,/^(?:橙色)/,/^(?:棕色)/,/^(?:灰色)/,/^(?:蓝灰色)/,/^(?:a\b)/,/^(?:an\b)/,/^(?:it\b)/,/^(?:shape\b)/,/^(?:rectangle\b)/,/^(?:arrow\b)/,/^(?:circle\b)/,/^(?:element\b)/,/^(?:把)/,/^(?:一点)/,/^(?:分之一)/,/^(?:一)/,/^(?:二)/,/^(?:三)/,/^(?:四)/,/^(?:五)/,/^(?:六)/,/^(?:七)/,/^(?:八)/,/^(?:九)/,/^(?:十)/,/^(?:保持)/,/^(?:不变)/,/^(?:不动)/,/^(?:其它)/,/^(?:其他)/,/^(?:[\u4e00-\u9fa5A-Za-z0123456789])/,/^(?:\\n)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = inputParserEn;
exports.Parser = inputParserEn.Parser;
exports.parse = function () { return inputParserEn.parse.apply(inputParserEn, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}