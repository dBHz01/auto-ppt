/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var inputParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,20],$Vc=[1,21],$Vd=[1,22],$Ve=[1,23],$Vf=[1,24],$Vg=[1,25],$Vh=[13,14,15,16,17,62,63,64,65,66,67,68,69,70,71,72,73],$Vi=[4,36,38,39,40,84,85,89,90],$Vj=[4,19,36,38,39,40,49,84,85,89,90],$Vk=[4,19,91],$Vl=[1,48],$Vm=[1,49],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,56],$Vr=[4,10],$Vs=[4,10,91],$Vt=[1,84],$Vu=[1,85],$Vv=[1,86],$Vw=[1,87],$Vx=[4,91],$Vy=[1,102],$Vz=[1,103],$VA=[1,104],$VB=[1,105],$VC=[1,106],$VD=[1,107],$VE=[1,108],$VF=[1,109],$VG=[1,110],$VH=[1,111],$VI=[1,116],$VJ=[1,117],$VK=[1,118],$VL=[1,126],$VM=[1,127],$VN=[1,128],$VO=[1,136],$VP=[75,76],$VQ=[4,10,19,49,81,82,83,91],$VR=[4,10,81,85],$VS=[4,10,19,36,38,39,40,49,81,82,83,84,85,89,90,91];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"eof":3,"EOF":4,"BREAK_LINE":5,"expressions":6,"predicate":7,"target":8,"adverbial":9,"FOR":10,"conditions":11,"object":12,"OBJ":13,"THIS":14,"THAT":15,"IT":16,"SINGLEONE":17,"color":18,"D":19,"attribute":20,"SIZE":21,"HEIGHT":22,"WIDTH":23,"COLOR":24,"TEXT":25,"HORILOC":26,"VERTILOC":27,"LOC":28,"computableAttribute":29,"uncomputableAttribute":30,"doubleAttribute":31,"HORIDIST":32,"VERTIDIST":33,"DISTANCE":34,"adverb":35,"DEEP":36,"BIT":37,"SHALLOW":38,"BIG":39,"SMALL":40,"direction":41,"LEFT":42,"RIGHT":43,"UP":44,"DOWN":45,"location":46,"HERE":47,"THERE":48,"AND":49,"MIDDLE":50,"const":51,"ONE":52,"TWO":53,"THREE":54,"FOUR":55,"FIVE":56,"SIX":57,"SEVEN":58,"EIGHT":59,"NINE":60,"TEN":61,"RED":62,"PINK":63,"PURPLE":64,"BLUE":65,"CYAN":66,"TEAL":67,"GREEN":68,"YELLOW":69,"ORANGE":70,"BROWN":71,"GREY":72,"BLUEGREY":73,"value":74,"TIME":75,"FRACTION":76,"DIFF":77,"uncomputableValue":78,"constValue":79,"relation":80,"EQUAL":81,"LEQ":82,"GEQ":83,"AT":84,"IS":85,"NEW":86,"MOVE":87,"CHANGE":88,"DAO":89,"WANG":90,"ALSO":91,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",5:"BREAK_LINE",10:"FOR",13:"OBJ",14:"THIS",15:"THAT",16:"IT",17:"SINGLEONE",19:"D",21:"SIZE",22:"HEIGHT",23:"WIDTH",24:"COLOR",25:"TEXT",26:"HORILOC",27:"VERTILOC",28:"LOC",32:"HORIDIST",33:"VERTIDIST",34:"DISTANCE",36:"DEEP",37:"BIT",38:"SHALLOW",39:"BIG",40:"SMALL",42:"LEFT",43:"RIGHT",44:"UP",45:"DOWN",47:"HERE",48:"THERE",49:"AND",50:"MIDDLE",52:"ONE",53:"TWO",54:"THREE",55:"FOUR",56:"FIVE",57:"SIX",58:"SEVEN",59:"EIGHT",60:"NINE",61:"TEN",62:"RED",63:"PINK",64:"PURPLE",65:"BLUE",66:"CYAN",67:"TEAL",68:"GREEN",69:"YELLOW",70:"ORANGE",71:"BROWN",72:"GREY",73:"BLUEGREY",75:"TIME",76:"FRACTION",77:"DIFF",81:"EQUAL",82:"LEQ",83:"GEQ",84:"AT",85:"IS",86:"NEW",87:"MOVE",88:"CHANGE",89:"DAO",90:"WANG",91:"ALSO"},
productions_: [0,[3,1],[3,2],[6,4],[6,6],[6,3],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,2],[12,3],[12,4],[12,4],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[29,1],[29,1],[29,1],[30,1],[30,1],[30,1],[30,1],[30,1],[31,1],[31,1],[31,1],[35,2],[35,2],[35,2],[35,2],[41,1],[41,1],[41,1],[41,1],[46,1],[46,1],[46,3],[46,5],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[74,4],[74,4],[74,5],[74,5],[74,3],[74,5],[78,3],[79,1],[79,1],[80,3],[80,3],[80,3],[80,5],[80,3],[80,3],[7,1],[7,1],[7,1],[8,1],[8,3],[8,5],[9,2],[9,2],[9,2],[9,2],[9,2],[9,1],[11,3],[11,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0]
break;
case 2:
this.$ = $$[$0-1]
break;
case 3:
 console.log({"predicate": $$[$0-3], "target": $$[$0-2], "adverbial": $$[$0-1], "conditions": undefined});
          return {"predicate": $$[$0-3], "target": $$[$0-2], "adverbial": $$[$0-1], "conditions": undefined}; 
break;
case 4:
 console.log({"predicate": $$[$0-5], "target": $$[$0-4], "adverbial": $$[$0-3], "conditions": $$[$0-1]});
          return {"predicate": $$[$0-5], "target": $$[$0-4], "adverbial": $$[$0-3], "conditions": $$[$0-1]}; 
break;
case 5:
 console.log({"predicate": $$[$0-2], "target": $$[$0-1], "adverbial": undefined, "conditions": undefined});
          return {"predicate": $$[$0-2], "target": $$[$0-1], "adverbial": undefined, "conditions": undefined}; 
break;
case 6:
this.$ = {"name": $$[$0], "type": "obj", "pos": _$[$0].first_column, "end": _$[$0].last_column};
break;
case 7: case 8:
this.$ = {"name": $$[$0], "type": "ref", "pos": _$[$0].first_column, "end": _$[$0].last_column};
break;
case 9:
this.$ = {"name": $$[$0], "type": "it", "pos": _$[$0].first_column, "end": _$[$0].last_column};
break;
case 10: case 11: case 12:
this.$ = {"name": $$[$0], "type": "ref-obj", "pos": _$[$0-1].first_column, "end": _$[$0].last_column};
break;
case 13:
this.$ = {"name": $$[$0], "type": "color-obj", "pos": _$[$0-2].first_column, "end": _$[$0].last_column, "color": $$[$0-2]};
break;
case 14:
this.$ = {"name": $$[$0-1], "type": "color-obj", "pos": _$[$0-3].first_column, "end": _$[$0].last_column, "color": $$[$0-2]};
break;
case 15:
this.$ = {"name": $$[$0], "type": "color-obj", "pos": _$[$0-3].first_column, "end": _$[$0].last_column, "color": $$[$0-2]};
break;
case 16: case 27:
this.$ = "size"
break;
case 17: case 28:
this.$ = "height"
break;
case 18: case 29:
this.$ = "width"
break;
case 19: case 30:
this.$ = "color"
break;
case 20: case 31:
this.$ = "text"
break;
case 21: case 24:
this.$ = "horiloc"
break;
case 22: case 25:
this.$ = "vertiloc"
break;
case 23: case 26:
this.$ = "loc"
break;
case 32:
this.$ = "horidist"
break;
case 33:
this.$ = "vertidist"
break;
case 34:
this.$ = "dist"
break;
case 35:
this.$ = "deep"
break;
case 36:
this.$ = "shallow"
break;
case 37:
this.$ = "big"
break;
case 38:
this.$ = "small"
break;
case 39:
this.$ = "left"
break;
case 40:
this.$ = "right"
break;
case 41:
this.$ = "up"
break;
case 42:
this.$ = "down"
break;
case 43:
this.$ = {"loc": "here", "type": "ref", "pos": _$[$0].first_column, "end": _$[$0].last_column}
break;
case 44:
this.$ = {"loc": "there", "type": "ref", "pos": _$[$0].first_column, "end": _$[$0].last_column}
break;
case 45:
this.$ = {"obj": $$[$0-2], "type": "single", "direction": $$[$0]}
break;
case 46:
this.$ = {"obj_1": $$[$0-4], "obj_2": $$[$0-2], "type": "double", "loc": "middle"}
break;
case 47:
this.$ = 1
break;
case 48:
this.$ = 2
break;
case 49:
this.$ = 3
break;
case 50:
this.$ = 4
break;
case 51:
this.$ = 5
break;
case 52:
this.$ = 6
break;
case 53:
this.$ = 7
break;
case 54:
this.$ = 8
break;
case 55:
this.$ = 9
break;
case 56:
this.$ = 10
break;
case 57:
 this.$ = "red" 
break;
case 58:
 this.$ = "pink" 
break;
case 59:
 this.$ = "purple" 
break;
case 60:
 this.$ = "blue" 
break;
case 61:
 this.$ = "cyan" 
break;
case 62:
 this.$ = "teal" 
break;
case 63:
 this.$ = "green" 
break;
case 64:
 this.$ = "yellow" 
break;
case 65:
 this.$ = "orange" 
break;
case 66:
 this.$ = "brown" 
break;
case 67:
 this.$ = "grey" 
break;
case 68:
 this.$ = "bluegrey" 
break;
case 69:
this.$ = {"val": $$[$0-3], "const": $$[$0-1], "type": "time"};
break;
case 70:
this.$ = {"val": $$[$0-3], "const": $$[$0-1], "type": "fraction"};
break;
case 71:
this.$ = {"val_1": $$[$0-4], "val_2": $$[$0-2], "type": "diff"};
break;
case 72:
this.$ = {"val_1": $$[$0-4], "val_2": $$[$0-2], "type": "sum"};
break;
case 73: case 75: case 88:
this.$ = {"obj": $$[$0-2], "type": "single", "val": $$[$0]};
break;
case 74: case 89:
this.$ = {"obj_1": $$[$0-4], "obj_2": $$[$0-2], "type": "double", "val": $$[$0]};
break;
case 76:
this.$ = {"type": "color", "val": $$[$0]};
break;
case 77:
this.$ = {"type": "text", "val": $$[$0]};
break;
case 78:
this.$ = {"type": "equation", "val_1": $$[$0-2], "val_2": $$[$0], "op": "="};
break;
case 79:
this.$ = {"type": "equation", "val_1": $$[$0-2], "val_2": $$[$0], "op": "<"};
break;
case 80:
this.$ = {"type": "equation", "val_1": $$[$0-2], "val_2": $$[$0], "op": ">"};
break;
case 81:
this.$ = {"type": "direction", "obj_1": $$[$0-4], "obj_2": $$[$0-2], "direction": $$[$0]};
break;
case 82: case 83:
this.$ = {"type": "assignment", "left_value": $$[$0-2], "right_value": $$[$0]};
break;
case 84:
this.$ = "new";
break;
case 85:
this.$ = "move";
break;
case 86:
this.$ = "change";
break;
case 87:
this.$ = {"obj": $$[$0], "type": "single", "val": "loc"};
break;
case 90: case 91:
this.$ = {"type": "loc", "loc": $$[$0]};
break;
case 92:
this.$ = {"type": "direction", "direction": $$[$0]};
break;
case 93: case 94:
this.$ = {"type": "value", "value": $$[$0]};
break;
case 95:
this.$ = {"type": "adverb", "value": $$[$0]};
break;
case 96:
 $$[$0-2].push($$[$0]);
          this.$ = $$[$0-2]; 
break;
case 97:
 this.$ = [$$[$0]]; 
break;
}
},
table: [{6:1,7:2,86:[1,3],87:[1,4],88:[1,5]},{1:[3]},{8:6,12:7,13:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:13,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg},o($Vh,[2,84]),o($Vh,[2,85]),o($Vh,[2,86]),{4:[1,27],9:26,35:32,36:[1,33],38:[1,34],39:[1,35],40:[1,36],84:[1,29],85:[1,31],89:[1,28],90:[1,30]},o($Vi,[2,87],{19:[1,37],49:[1,38]}),o($Vj,[2,6]),o($Vj,[2,7],{18:40,13:[1,39],62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg}),o($Vj,[2,8],{18:42,13:[1,41],62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg}),o($Vj,[2,9]),{13:[1,43]},{19:[1,44]},o($Vk,[2,57]),o($Vk,[2,58]),o($Vk,[2,59]),o($Vk,[2,60]),o($Vk,[2,61]),o($Vk,[2,62]),o($Vk,[2,63]),o($Vk,[2,64]),o($Vk,[2,65]),o($Vk,[2,66]),o($Vk,[2,67]),o($Vk,[2,68]),{4:[1,45],10:[1,46]},{1:[2,5]},{12:50,13:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:13,46:47,47:$Vl,48:$Vm,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg},{12:50,13:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:13,46:51,47:$Vl,48:$Vm,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg},{41:52,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{12:59,13:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:13,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:57,78:58},o($Vr,[2,95]),{37:[1,60]},{37:[1,61]},{37:[1,62]},{37:[1,63]},{20:64,21:[1,65],22:[1,66],23:[1,67],24:[1,68],25:[1,69],26:[1,70],27:[1,71],28:[1,72]},{12:73,13:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:13,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg},o($Vj,[2,10]),{19:[1,74]},o($Vj,[2,11]),{19:[1,75]},o($Vj,[2,12]),{13:[1,76]},{1:[2,3]},{11:77,12:80,13:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:13,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:79,78:81,80:78},o($Vr,[2,90]),o($Vr,[2,43]),o($Vr,[2,44]),{19:[1,82],49:[1,83]},o($Vr,[2,91]),o($Vr,[2,92]),o($Vs,[2,39]),o($Vs,[2,40]),o($Vs,[2,41]),o($Vs,[2,42]),o($Vr,[2,93],{19:$Vt,49:$Vu}),o($Vr,[2,94]),{19:$Vv,49:$Vw},o($Vr,[2,35]),o($Vr,[2,36]),o($Vr,[2,37]),o($Vr,[2,38]),o($Vi,[2,88]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),{19:[1,88]},{13:[1,89]},{13:[1,90]},o($Vj,[2,13]),{4:[1,91],91:[1,92]},o($Vx,[2,97]),{19:$Vt,49:$Vu,81:[1,93],82:[1,94],83:[1,95]},{19:$Vv,49:$Vw,84:[1,96]},{81:[1,97],85:[1,98]},{41:99,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{12:100,13:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:13,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg},{51:101,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH},{12:113,13:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:13,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:112},{21:[1,119],22:[1,120],23:[1,121],24:[1,122],25:[1,123],26:$VI,27:$VJ,28:$VK,29:114,30:115},{12:124,13:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:13,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg},{31:125,32:$VL,33:$VM,34:$VN},o($Vj,[2,14]),o($Vj,[2,15]),{1:[2,4]},{12:80,13:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:13,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:79,78:81,80:129},{12:113,13:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:13,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:130},{12:113,13:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:13,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:131},{12:113,13:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:13,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,74:132},{12:133,13:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:13,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg},{13:$VO,18:135,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,79:134},{13:$VO,18:135,62:$V5,63:$V6,64:$V7,65:$V8,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,79:137},o($Vr,[2,45]),{19:[1,138]},{75:[1,139],76:[1,140]},o($VP,[2,47]),o($VP,[2,48]),o($VP,[2,49]),o($VP,[2,50]),o($VP,[2,51]),o($VP,[2,52]),o($VP,[2,53]),o($VP,[2,54]),o($VP,[2,55]),o($VP,[2,56]),{19:[1,141],49:$Vu},{19:[1,142],49:$Vw},o($VQ,[2,73]),o($VR,[2,75]),o($VQ,[2,24]),o($VQ,[2,25]),o($VQ,[2,26]),o($VR,[2,27]),o($VR,[2,28]),o($VR,[2,29]),o($VR,[2,30]),o($VR,[2,31]),{19:[1,143]},o($Vi,[2,89]),o($VS,[2,32]),o($VS,[2,33]),o($VS,[2,34]),o($Vx,[2,96]),o($Vx,[2,78],{19:$Vt,49:$Vu}),o($Vx,[2,79],{19:$Vt,49:$Vu}),o($Vx,[2,80],{19:$Vt,49:$Vu}),{19:[1,144]},o($Vx,[2,82]),o($Vx,[2,76]),o($Vx,[2,77]),o($Vx,[2,83]),{50:[1,145]},o($VQ,[2,69]),o($VQ,[2,70]),{49:[1,147],51:101,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,77:[1,146]},{26:$VI,27:$VJ,28:$VK,29:114},{31:148,32:$VL,33:$VM,34:$VN},{41:149,42:$Vn,43:$Vo,44:$Vp,45:$Vq},o($Vr,[2,46]),o($VQ,[2,71]),o($VQ,[2,72]),o($VQ,[2,74]),o($Vx,[2,81])],
defaultActions: {27:[2,5],45:[2,3],91:[2,4]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 86
break;
case 2:return 87
break;
case 3:return 88
break;
case 4:return 14
break;
case 5:return 15
break;
case 6:return 47
break;
case 7:return 48
break;
case 8:return 21
break;
case 9:return 22
break;
case 10:return 23
break;
case 11:return 24
break;
case 12:return 25
break;
case 13:return 26
break;
case 14:return 27
break;
case 15:return 28
break;
case 16:return 32
break;
case 17:return 33
break;
case 18:return 34
break;
case 19:return 36
break;
case 20:return 38
break;
case 21:return 39
break;
case 22:return 40
break;
case 23:return 42
break;
case 24:return 43
break;
case 25:return 44
break;
case 26:return 45
break;
case 27:return 42
break;
case 28:return 43
break;
case 29:return 44
break;
case 30:return 45 
break;
case 31:return 42
break;
case 32:return 43
break;
case 33:return 44
break;
case 34:return 45 
break;
case 35:return 50 
break;
case 36:return 19
break;
case 37:return 49
break;
case 38:return 89
break;
case 39:return 84
break;
case 40:return 90
break;
case 41:return 85
break;
case 42:return 75
break;
case 43:return 77
break;
case 44:return 10
break;
case 45:return 10
break;
case 46:return 91
break;
case 47:return 81
break;
case 48:return 83
break;
case 49:return 82
break;
case 50:return 62
break;
case 51:return 63
break;
case 52:return 64
break;
case 53:return 65
break;
case 54:return 66
break;
case 55:return 67
break;
case 56:return 68
break;
case 57:return 69
break;
case 58:return 70
break;
case 59:return 71
break;
case 60:return 72
break;
case 61:return 73
break;
case 62:return 17
break;
case 63:return 16
break;
case 64:return 37
break;
case 65:return 76
break;
case 66:return 52
break;
case 67:return 53
break;
case 68:return 54
break;
case 69:return 55
break;
case 70:return 56
break;
case 71:return 57
break;
case 72:return 58
break;
case 73:return 59
break;
case 74:return 60
break;
case 75:return 61
break;
case 76:return 13
break;
case 77:return 5
break;
case 78:return 4
break;
case 79:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:新建)/,/^(?:移动)/,/^(?:修改)/,/^(?:这个)/,/^(?:那个)/,/^(?:这里)/,/^(?:那里)/,/^(?:大小)/,/^(?:高度)/,/^(?:宽度)/,/^(?:颜色)/,/^(?:文字)/,/^(?:水平位置)/,/^(?:竖直位置)/,/^(?:位置)/,/^(?:水平距离)/,/^(?:竖直距离)/,/^(?:距离)/,/^(?:深)/,/^(?:浅)/,/^(?:大)/,/^(?:小)/,/^(?:左边)/,/^(?:右边)/,/^(?:上边)/,/^(?:下边)/,/^(?:左方)/,/^(?:右方)/,/^(?:上方)/,/^(?:下方)/,/^(?:左)/,/^(?:右)/,/^(?:上)/,/^(?:下)/,/^(?:中点)/,/^(?:的)/,/^(?:和)/,/^(?:到)/,/^(?:在)/,/^(?:往)/,/^(?:为)/,/^(?:倍)/,/^(?:差)/,/^(?:使得)/,/^(?:使)/,/^(?:且)/,/^(?:等于)/,/^(?:大于)/,/^(?:小于)/,/^(?:红色)/,/^(?:粉色)/,/^(?:紫色)/,/^(?:蓝色)/,/^(?:青色)/,/^(?:蓝绿色)/,/^(?:绿色)/,/^(?:黄色)/,/^(?:橙色)/,/^(?:棕色)/,/^(?:灰色)/,/^(?:蓝灰色)/,/^(?:一个)/,/^(?:它)/,/^(?:一点)/,/^(?:分之一)/,/^(?:一)/,/^(?:二)/,/^(?:三)/,/^(?:四)/,/^(?:五)/,/^(?:六)/,/^(?:七)/,/^(?:八)/,/^(?:九)/,/^(?:十)/,/^(?:[\u4e00-\u9fa5A-Za-z]+?(?=[和的到往在为深浅大小红粉紫蓝青蓝黄橙棕灰色它\n]))/,/^(?:\\n)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = inputParser;
exports.Parser = inputParser.Parser;
exports.parse = function () { return inputParser.parse.apply(inputParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}