/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var inputParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,6],$V3=[19,20,21,22,25,73,74,75,76,77,78,79,80,81,82,83,84],$V4=[2,10],$V5=[1,12],$V6=[1,13],$V7=[1,14],$V8=[1,11],$V9=[14,16,17,19,20,21,22,25,29,47,49,50,51,73,74,75,76,77,78,79,80,81,82,83,84,94,95,99,100],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[1,20],$Vf=[1,22],$Vg=[1,19],$Vh=[1,21],$Vi=[7,8,47,49,50,51,94,95,96,97,98,99,100],$Vj=[19,20,21,22,25],$Vk=[2,21],$Vl=[1,32],$Vm=[1,33],$Vn=[1,34],$Vo=[1,35],$Vp=[1,36],$Vq=[1,37],$Vr=[1,38],$Vs=[1,39],$Vt=[1,40],$Vu=[1,41],$Vv=[1,42],$Vw=[1,43],$Vx=[7,8,12,47,49,50,51,60,94,95,96,97,98,99,100],$Vy=[7,8,12,19,20,21,22,25,47,49,50,51,60,73,74,75,76,77,78,79,80,81,82,83,84,94,95,96,97,98,99,100],$Vz=[1,55],$VA=[1,56],$VB=[1,60],$VC=[1,61],$VD=[1,62],$VE=[1,63],$VF=[7,8],$VG=[1,86],$VH=[1,87],$VI=[1,88],$VJ=[1,89],$VK=[1,85],$VL=[2,20],$VM=[1,90],$VN=[7,8,12,19,20,21,22,25,101],$VO=[1,96],$VP=[7,101],$VQ=[1,100],$VR=[1,101],$VS=[1,103],$VT=[1,104],$VU=[7,8,101],$VV=[2,23],$VW=[7,8,12,25,47,49,50,51,60,94,95,96,97,98,99,100,101],$VX=[1,124],$VY=[1,125],$VZ=[1,126],$V_=[1,127],$V$=[1,128],$V01=[1,129],$V11=[1,130],$V21=[1,131],$V31=[1,132],$V41=[1,133],$V51=[1,138],$V61=[1,139],$V71=[1,140],$V81=[1,151],$V91=[2,110],$Va1=[1,157],$Vb1=[1,158],$Vc1=[1,159],$Vd1=[86,87],$Ve1=[7,8,12,60,91,92,93,101],$Vf1=[7,8,91,95],$Vg1=[7,8,12,47,49,50,51,60,91,92,93,94,95,96,97,98,99,100,101];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"predicate":4,"target":5,"adverbial":6,"EOF":7,"FOR":8,"conditions":9,"LET":10,"FILLER":11,"D":12,"not_ref":13,"SINGLEONE":14,"ref":15,"THIS":16,"THAT":17,"shape":18,"RECT":19,"CIRCLE":20,"ARROW":21,"ELEMENT":22,"constValue":23,"color":24,"INPUTTEXT":25,"color_or_not":26,"shape_or_inputText":27,"object":28,"IT":29,"attribute":30,"SIZE":31,"HEIGHT":32,"WIDTH":33,"COLOR":34,"TEXT":35,"HORILOC":36,"VERTILOC":37,"LOC":38,"SHAPE":39,"computableAttribute":40,"uncomputableAttribute":41,"doubleAttribute":42,"HORIDIST":43,"VERTIDIST":44,"DISTANCE":45,"adverb":46,"DEEP":47,"BIT":48,"SHALLOW":49,"BIG":50,"SMALL":51,"direction":52,"LEFT":53,"RIGHT":54,"UP":55,"DOWN":56,"location":57,"HERE":58,"THERE":59,"AND":60,"MIDDLE":61,"const":62,"ONE":63,"TWO":64,"THREE":65,"FOUR":66,"FIVE":67,"SIX":68,"SEVEN":69,"EIGHT":70,"NINE":71,"TEN":72,"RED":73,"PINK":74,"PURPLE":75,"BLUE":76,"CYAN":77,"TEAL":78,"GREEN":79,"YELLOW":80,"ORANGE":81,"BROWN":82,"GREY":83,"BLUEGREY":84,"value":85,"TIME":86,"FRACTION":87,"DIFF":88,"uncomputableValue":89,"relation":90,"EQUAL":91,"LEQ":92,"GEQ":93,"AT":94,"IS":95,"NEW":96,"MOVE":97,"CHANGE":98,"DAO":99,"WANG":100,"ALSO":101,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",8:"FOR",10:"LET",12:"D",14:"SINGLEONE",16:"THIS",17:"THAT",19:"RECT",20:"CIRCLE",21:"ARROW",22:"ELEMENT",25:"INPUTTEXT",29:"IT",31:"SIZE",32:"HEIGHT",33:"WIDTH",34:"COLOR",35:"TEXT",36:"HORILOC",37:"VERTILOC",38:"LOC",39:"SHAPE",43:"HORIDIST",44:"VERTIDIST",45:"DISTANCE",47:"DEEP",48:"BIT",49:"SHALLOW",50:"BIG",51:"SMALL",53:"LEFT",54:"RIGHT",55:"UP",56:"DOWN",58:"HERE",59:"THERE",60:"AND",61:"MIDDLE",63:"ONE",64:"TWO",65:"THREE",66:"FOUR",67:"FIVE",68:"SIX",69:"SEVEN",70:"EIGHT",71:"NINE",72:"TEN",73:"RED",74:"PINK",75:"PURPLE",76:"BLUE",77:"CYAN",78:"TEAL",79:"GREEN",80:"YELLOW",81:"ORANGE",82:"BROWN",83:"GREY",84:"BLUEGREY",86:"TIME",87:"FRACTION",88:"DIFF",91:"EQUAL",92:"LEQ",93:"GEQ",94:"AT",95:"IS",96:"NEW",97:"MOVE",98:"CHANGE",99:"DAO",100:"WANG",101:"ALSO"},
productions_: [0,[3,4],[3,6],[3,5],[3,3],[3,7],[3,5],[11,1],[11,0],[13,1],[13,0],[15,1],[15,1],[18,1],[18,1],[18,1],[18,1],[23,1],[23,1],[23,1],[26,1],[26,0],[27,1],[27,1],[27,2],[28,3],[28,3],[28,4],[28,4],[28,1],[28,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[40,1],[40,1],[40,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[42,1],[42,1],[42,1],[46,2],[46,2],[46,2],[46,2],[52,1],[52,1],[52,1],[52,1],[57,1],[57,1],[57,3],[57,5],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[85,4],[85,4],[85,5],[85,5],[85,3],[85,5],[89,3],[90,3],[90,3],[90,3],[90,5],[90,3],[90,3],[4,1],[4,1],[4,1],[5,1],[5,3],[5,5],[6,2],[6,2],[6,2],[6,2],[6,2],[6,3],[6,4],[6,1],[9,3],[9,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log({"predicate": $$[$0-3], "target": $$[$0-2], "adverbial": $$[$0-1], "conditions": undefined});
          return {"predicate": $$[$0-3], "target": $$[$0-2], "adverbial": $$[$0-1], "conditions": undefined}; 
break;
case 2:
 console.log({"predicate": $$[$0-5], "target": $$[$0-4], "adverbial": $$[$0-3], "conditions": $$[$0-1]});
          return {"predicate": $$[$0-5], "target": $$[$0-4], "adverbial": $$[$0-3], "conditions": $$[$0-1]}; 
break;
case 3:
 console.log({"predicate": $$[$0-4], "target": $$[$0-3], "adverbial": undefined, "conditions": $$[$0-1]});
          return {"predicate": $$[$0-4], "target": $$[$0-3], "adverbial": undefined, "conditions": $$[$0-1]}; 
break;
case 4:
 console.log({"predicate": $$[$0-2], "target": $$[$0-1], "adverbial": undefined, "conditions": undefined});
          return {"predicate": $$[$0-2], "target": $$[$0-1], "adverbial": undefined, "conditions": undefined}; 
break;
case 5:
 console.log({"predicate": $$[$0-4], "target": $$[$0-5], "adverbial": $$[$0-3], "conditions": $$[$0-1]});
          return {"predicate": $$[$0-4], "target": $$[$0-5], "adverbial": $$[$0-3], "conditions": $$[$0-1]}; 
break;
case 6:
 console.log({"predicate": $$[$0-2], "target": $$[$0-3], "adverbial": $$[$0-1], "conditions": undefined});
          return {"predicate": $$[$0-2], "target": $$[$0-3], "adverbial": $$[$0-1], "conditions": undefined}; 
break;
case 9: case 10:
this.$ = ""
break;
case 11: case 12:
this.$ = "ref"
break;
case 13:
 this.$ = "rect" 
break;
case 14:
 this.$ = "circle" 
break;
case 15:
 this.$ = "arrow" 
break;
case 16:
 this.$ = "" 
break;
case 17: case 20:
this.$ = {"type": "color", "val": $$[$0]};
break;
case 18:
this.$ = {"type": "shape", "val": $$[$0]};
break;
case 19:
this.$ = {"type": "text", "val": $$[$0]};
break;
case 21:
this.$ = "";
break;
case 22:
this.$ = [{"type": "shape", "val": $$[$0]}];
break;
case 23:
this.$ = [{"type": "text", "val": $$[$0]}];
break;
case 24:
this.$ = [{"type": "shape", "val": $$[$0-1]}, {"type": "text", "val": $$[$0]}];
break;
case 25:
let pos_1 = $$[$0-2] ? _$[$0-2].first_column : _$[$0-1].first_column;
         $$[$0].push($$[$0-1]);
         this.$ = {"type": $$[$0-2], "adj": $$[$0], "pos": pos_1, "end": _$[$0].last_column};
break;
case 26:
let pos_2 = $$[$0-2] ? _$[$0-2].first_column : _$[$0-1].first_column;
         $$[$0].push($$[$0-1]);
         this.$ = {"type": $$[$0-2], "adj": $$[$0], "pos": pos_2, "end": _$[$0].last_column};
break;
case 27:
let pos_3 = $$[$0-3] ? _$[$0-3].first_column : _$[$0-2].first_column;
         $$[$0].push({"type": "color", "val": $$[$0-2]});
         this.$ = {"type": $$[$0-3], "adj": $$[$0], "pos": pos_3, "end": _$[$0].last_column};
break;
case 28:
let pos_4 = $$[$0-3] ? _$[$0-3].first_column : _$[$0-2].first_column;
         $$[$0].push({"type": "color", "val": $$[$0-2]});
         this.$ = {"type": $$[$0-3], "adj": $$[$0], "pos": pos_4, "end": _$[$0].last_column};
break;
case 29:
this.$ = {"type": "it", "adj": [], "pos": _$[$0].first_column, "end": _$[$0].last_column};
break;
case 30:
this.$ = {"type": $$[$0], "adj": [], "pos": _$[$0].first_column, "end": _$[$0].last_column};
break;
case 31: case 43:
this.$ = "size"
break;
case 32: case 44:
this.$ = "height"
break;
case 33: case 45:
this.$ = "width"
break;
case 34: case 46:
this.$ = "color"
break;
case 35: case 47:
this.$ = "text"
break;
case 36:
this.$ = "horiloc"
break;
case 37:
this.$ = "vertiloc"
break;
case 38: case 42:
this.$ = "loc"
break;
case 39: case 48:
this.$ = "shape"
break;
case 40:
this.$ = "x"
break;
case 41:
this.$ = "y"
break;
case 49:
this.$ = "horidist"
break;
case 50:
this.$ = "vertidist"
break;
case 51:
this.$ = "dist"
break;
case 52:
this.$ = "deep"
break;
case 53:
this.$ = "shallow"
break;
case 54:
this.$ = "big"
break;
case 55:
this.$ = "small"
break;
case 56:
this.$ = "left"
break;
case 57:
this.$ = "right"
break;
case 58:
this.$ = "up"
break;
case 59:
this.$ = "down"
break;
case 60:
this.$ = {"loc": "here", "type": "ref", "pos": _$[$0].first_column, "end": _$[$0].last_column}
break;
case 61:
this.$ = {"loc": "there", "type": "ref", "pos": _$[$0].first_column, "end": _$[$0].last_column}
break;
case 62:
this.$ = {"obj": $$[$0-2], "type": "single", "direction": $$[$0]}
break;
case 63:
this.$ = {"obj_1": $$[$0-4], "obj_2": $$[$0-2], "type": "double", "loc": "middle"}
break;
case 64:
this.$ = 1
break;
case 65:
this.$ = 2
break;
case 66:
this.$ = 3
break;
case 67:
this.$ = 4
break;
case 68:
this.$ = 5
break;
case 69:
this.$ = 6
break;
case 70:
this.$ = 7
break;
case 71:
this.$ = 8
break;
case 72:
this.$ = 9
break;
case 73:
this.$ = 10
break;
case 74:
 this.$ = "red" 
break;
case 75:
 this.$ = "pink" 
break;
case 76:
 this.$ = "purple" 
break;
case 77:
 this.$ = "blue" 
break;
case 78:
 this.$ = "cyan" 
break;
case 79:
 this.$ = "teal" 
break;
case 80:
 this.$ = "green" 
break;
case 81:
 this.$ = "yellow" 
break;
case 82:
 this.$ = "orange" 
break;
case 83:
 this.$ = "brown" 
break;
case 84:
 this.$ = "grey" 
break;
case 85:
 this.$ = "bluegrey" 
break;
case 86:
this.$ = {"val": $$[$0-3], "const": $$[$0-1], "type": "time"};
break;
case 87:
this.$ = {"val": $$[$0-3], "const": $$[$0-1], "type": "fraction"};
break;
case 88:
this.$ = {"val_1": $$[$0-4], "val_2": $$[$0-2], "type": "diff"};
break;
case 89:
this.$ = {"val_1": $$[$0-4], "val_2": $$[$0-2], "type": "sum"};
break;
case 90: case 92: case 103:
this.$ = {"obj": $$[$0-2], "type": "single", "val": $$[$0]};
break;
case 91: case 104:
this.$ = {"obj_1": $$[$0-4], "obj_2": $$[$0-2], "type": "double", "val": $$[$0]};
break;
case 93:
this.$ = {"type": "equation", "val_1": $$[$0-2], "val_2": $$[$0], "op": "="};
break;
case 94:
this.$ = {"type": "equation", "val_1": $$[$0-2], "val_2": $$[$0], "op": "<"};
break;
case 95:
this.$ = {"type": "equation", "val_1": $$[$0-2], "val_2": $$[$0], "op": ">"};
break;
case 96:
this.$ = {"type": "direction", "obj_1": $$[$0-4], "obj_2": $$[$0-2], "direction": $$[$0]};
break;
case 97: case 98:
this.$ = {"type": "assignment", "left_value": $$[$0-2], "right_value": $$[$0]};
break;
case 99:
this.$ = "new";
break;
case 100:
this.$ = "move";
break;
case 101:
this.$ = "change";
break;
case 102:
this.$ = {"obj": $$[$0], "type": "single", "val": "loc"};
break;
case 105: case 106:
this.$ = {"type": "loc", "loc": $$[$0]};
break;
case 107:
this.$ = {"type": "direction", "direction": $$[$0]};
break;
case 108:
this.$ = {"type": "computable", "value": $$[$0]};
break;
case 109:
this.$ = {"type": "uncomputable", "value": $$[$0]};
break;
case 110:
this.$ = {"type": "color", "value": $$[$0]};
break;
case 111:
this.$ = {"type": "text", "value": $$[$0]};
break;
case 112:
this.$ = {"type": "adverb", "value": $$[$0]};
break;
case 113:
 $$[$0-2].push($$[$0]);
          this.$ = $$[$0-2]; 
break;
case 114:
 this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,10:[1,3],96:$V0,97:$V1,98:$V2},{1:[3]},o($V3,$V4,{5:7,28:8,13:9,15:10,14:$V5,16:$V6,17:$V7,29:$V8}),o($V3,$V4,{28:8,13:9,15:10,5:15,14:$V5,16:$V6,17:$V7,29:$V8}),o($V9,[2,99]),o($V9,[2,100]),o($V9,[2,101]),{6:16,7:[1,18],8:[1,17],46:23,47:$Va,49:$Vb,50:$Vc,51:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},o($Vi,[2,102],{12:[1,28],60:[1,29]}),o($Vj,$Vk,{26:30,24:31,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw}),o($Vx,[2,30],{26:44,24:45,19:$Vk,20:$Vk,21:$Vk,22:$Vk,25:$Vk,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw}),o($Vx,[2,29]),o($V3,[2,9]),o($Vy,[2,11]),o($Vy,[2,12]),{4:46,96:$V0,97:$V1,98:$V2},{7:[1,47],8:[1,48]},o($V3,$V4,{13:9,15:10,9:49,90:50,85:51,28:52,89:53,14:$V5,16:$V6,17:$V7,29:$V8}),{1:[2,4]},o($V3,$V4,{13:9,15:10,57:54,28:57,14:$V5,16:$V6,17:$V7,29:$V8,58:$Vz,59:$VA}),o($V3,$V4,{13:9,15:10,28:57,57:58,14:$V5,16:$V6,17:$V7,29:$V8,58:$Vz,59:$VA}),{52:59,53:$VB,54:$VC,55:$VD,56:$VE},o($V3,$V4,{15:10,85:64,89:65,13:66,28:67,14:$V5,16:$V6,17:$V7,29:$V8}),o($VF,[2,112]),{48:[1,68]},{48:[1,69]},{48:[1,70]},{48:[1,71]},{30:72,31:[1,73],32:[1,74],33:[1,75],34:[1,76],35:[1,77],36:[1,78],37:[1,79],38:[1,80],39:[1,81]},o($V3,$V4,{13:9,15:10,28:82,14:$V5,16:$V6,17:$V7,29:$V8}),{18:84,19:$VG,20:$VH,21:$VI,22:$VJ,25:$VK,27:83},o($Vj,$VL,{12:$VM}),o($VN,[2,74]),o($VN,[2,75]),o($VN,[2,76]),o($VN,[2,77]),o($VN,[2,78]),o($VN,[2,79]),o($VN,[2,80]),o($VN,[2,81]),o($VN,[2,82]),o($VN,[2,83]),o($VN,[2,84]),o($VN,[2,85]),{18:84,19:$VG,20:$VH,21:$VI,22:$VJ,25:$VK,27:91},o($Vj,$VL,{12:[1,92]}),{6:93,46:23,47:$Va,49:$Vb,50:$Vc,51:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},{1:[2,1]},o($V3,$V4,{13:9,15:10,90:50,85:51,28:52,89:53,9:94,14:$V5,16:$V6,17:$V7,29:$V8}),{7:[1,95],101:$VO},o($VP,[2,114]),{12:$VQ,60:$VR,91:[1,97],92:[1,98],93:[1,99]},{12:$VS,60:$VT,94:[1,102]},{91:[1,105],95:[1,106]},o($VF,[2,105]),o($VF,[2,60]),o($VF,[2,61]),{12:[1,107],60:[1,108]},o($VF,[2,106]),o($VF,[2,107]),o($VU,[2,56]),o($VU,[2,57]),o($VU,[2,58]),o($VU,[2,59]),o($VF,[2,108],{12:$VQ,60:$VR}),o($VF,[2,109]),o($Vj,$Vk,{24:109,26:110,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw}),{12:$VS,60:$VT},o($VF,[2,52]),o($VF,[2,53]),o($VF,[2,54]),o($VF,[2,55]),o($Vi,[2,103]),o($Vi,[2,31]),o($Vi,[2,32]),o($Vi,[2,33]),o($Vi,[2,34]),o($Vi,[2,35]),o($Vi,[2,36]),o($Vi,[2,37]),o($Vi,[2,38]),o($Vi,[2,39]),{12:[1,111]},o($Vx,[2,25]),o($Vx,[2,22],{25:[1,112]}),o($Vx,$VV),o($VW,[2,13]),o($VW,[2,14]),o($VW,[2,15]),o($VW,[2,16]),{18:84,19:$VG,20:$VH,21:$VI,22:$VJ,25:$VK,27:113},o($Vx,[2,26]),{18:84,19:$VG,20:$VH,21:$VI,22:$VJ,25:$VK,27:114},{7:[1,116],8:[1,115]},{7:[1,117],101:$VO},{1:[2,3]},o($V3,$V4,{13:9,15:10,85:51,28:52,89:53,90:118,14:$V5,16:$V6,17:$V7,29:$V8}),o($V3,$V4,{13:9,15:10,85:119,28:120,14:$V5,16:$V6,17:$V7,29:$V8}),o($V3,$V4,{13:9,15:10,28:120,85:121,14:$V5,16:$V6,17:$V7,29:$V8}),o($V3,$V4,{13:9,15:10,28:120,85:122,14:$V5,16:$V6,17:$V7,29:$V8}),{62:123,63:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,69:$V11,70:$V21,71:$V31,72:$V41},o($V3,$V4,{13:9,15:10,28:120,85:134,14:$V5,16:$V6,17:$V7,29:$V8}),o($V3,$V4,{13:9,15:10,28:135,14:$V5,16:$V6,17:$V7,29:$V8}),{31:[1,141],32:[1,142],33:[1,143],34:[1,144],35:[1,145],36:$V51,37:$V61,38:$V71,39:[1,146],40:136,41:137},o($V3,$V4,{13:9,15:10,28:147,14:$V5,16:$V6,17:$V7,29:$V8}),{18:150,19:$VG,20:$VH,21:$VI,22:$VJ,23:148,24:149,25:$V81,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw},{18:150,19:$VG,20:$VH,21:$VI,22:$VJ,23:152,24:149,25:$V81,73:$Vl,74:$Vm,75:$Vn,76:$Vo,77:$Vp,78:$Vq,79:$Vr,80:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw},{52:153,53:$VB,54:$VC,55:$VD,56:$VE},o($V3,$V4,{13:9,15:10,28:154,14:$V5,16:$V6,17:$V7,29:$V8}),o($Vj,$VL,{7:$V91,8:$V91,12:$VM}),{18:84,19:$VG,20:$VH,21:$VI,22:$VJ,25:[1,155],27:83},{42:156,43:$Va1,44:$Vb1,45:$Vc1},o($Vx,[2,24]),o($Vx,[2,27]),o($Vx,[2,28]),o($V3,$V4,{13:9,15:10,90:50,85:51,28:52,89:53,9:160,14:$V5,16:$V6,17:$V7,29:$V8}),{1:[2,6]},{1:[2,2]},o($VP,[2,113]),o($VP,[2,93],{12:$VQ,60:$VR}),{12:[1,161],60:$VT},o($VP,[2,94],{12:$VQ,60:$VR}),o($VP,[2,95],{12:$VQ,60:$VR}),{86:[1,162],87:[1,163]},o($Vd1,[2,64]),o($Vd1,[2,65]),o($Vd1,[2,66]),o($Vd1,[2,67]),o($Vd1,[2,68]),o($Vd1,[2,69]),o($Vd1,[2,70]),o($Vd1,[2,71]),o($Vd1,[2,72]),o($Vd1,[2,73]),{12:[1,164],60:$VR},{12:[1,165]},o($Ve1,[2,90]),o($Vf1,[2,92]),o($Ve1,[2,40]),o($Ve1,[2,41]),o($Ve1,[2,42]),o($Vf1,[2,43]),o($Vf1,[2,44]),o($Vf1,[2,45]),o($Vf1,[2,46]),o($Vf1,[2,47]),o($Vf1,[2,48]),{12:[1,166]},o($VP,[2,97]),o($VP,[2,17]),o($VP,[2,18]),o($VP,[2,19]),o($VP,[2,98]),o($VF,[2,62]),{12:[1,167]},o($VF,[2,111],{12:$VV,60:$VV}),o($Vi,[2,104]),o($Vg1,[2,49]),o($Vg1,[2,50]),o($Vg1,[2,51]),{7:[1,168],101:$VO},{36:$V51,37:$V61,38:$V71,40:136},o($Ve1,[2,86]),o($Ve1,[2,87]),{60:[1,170],62:123,63:$VX,64:$VY,65:$VZ,66:$V_,67:$V$,68:$V01,69:$V11,70:$V21,71:$V31,72:$V41,88:[1,169]},{52:171,53:$VB,54:$VC,55:$VD,56:$VE},{42:172,43:$Va1,44:$Vb1,45:$Vc1},{61:[1,173]},{1:[2,5]},o($Ve1,[2,88]),o($Ve1,[2,89]),o($VP,[2,96]),o($Ve1,[2,91]),o($VF,[2,63])],
defaultActions: {18:[2,4],47:[2,1],95:[2,3],116:[2,6],117:[2,2],168:[2,5]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 96
break;
case 2:return 97
break;
case 3:return 98
break;
case 4:return 16
break;
case 5:return 17
break;
case 6:return 58
break;
case 7:return 59
break;
case 8:return 31
break;
case 9:return 32
break;
case 10:return 33
break;
case 11:return 34
break;
case 12:return 35
break;
case 13:return 35
break;
case 14:return 36
break;
case 15:return 37
break;
case 16:return 38
break;
case 17:return 43
break;
case 18:return 44
break;
case 19:return 45
break;
case 20:return 47
break;
case 21:return 49
break;
case 22:return 50
break;
case 23:return 51
break;
case 24:return 53
break;
case 25:return 54
break;
case 26:return 55
break;
case 27:return 56
break;
case 28:return 53
break;
case 29:return 54
break;
case 30:return 55
break;
case 31:return 56 
break;
case 32:return 53
break;
case 33:return 54
break;
case 34:return 55
break;
case 35:return 56 
break;
case 36:return 61 
break;
case 37:return 12
break;
case 38:return 60
break;
case 39:return 99
break;
case 40:return 94
break;
case 41:return 100
break;
case 42:return 95
break;
case 43:return 95
break;
case 44:return 86
break;
case 45:return 88
break;
case 46:return 8
break;
case 47:return 8
break;
case 48:return 101
break;
case 49:return 91
break;
case 50:return 93
break;
case 51:return 92
break;
case 52:return 73
break;
case 53:return 74
break;
case 54:return 75
break;
case 55:return 76
break;
case 56:return 77
break;
case 57:return 78
break;
case 58:return 79
break;
case 59:return 80
break;
case 60:return 81
break;
case 61:return 82
break;
case 62:return 83
break;
case 63:return 84
break;
case 64:return 14
break;
case 65:return 29
break;
case 66:return 39
break;
case 67:return 19
break;
case 68:return 21
break;
case 69:return 20
break;
case 70:return 22
break;
case 71:return 10
break;
case 72:return 48
break;
case 73:return 87
break;
case 74:return 63
break;
case 75:return 64
break;
case 76:return 65
break;
case 77:return 66
break;
case 78:return 67
break;
case 79:return 68
break;
case 80:return 69
break;
case 81:return 70
break;
case 82:return 71
break;
case 83:return 72
break;
case 84:return 25
break;
case 85:return 'BREAK_LINE'
break;
case 86:return 7
break;
case 87:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:新建)/,/^(?:移动)/,/^(?:修改)/,/^(?:这个)/,/^(?:那个)/,/^(?:这里)/,/^(?:那里)/,/^(?:大小)/,/^(?:高度)/,/^(?:宽度)/,/^(?:颜色)/,/^(?:文字)/,/^(?:文本)/,/^(?:水平位置)/,/^(?:竖直位置)/,/^(?:位置)/,/^(?:水平距离)/,/^(?:竖直距离)/,/^(?:距离)/,/^(?:深)/,/^(?:浅)/,/^(?:大)/,/^(?:小)/,/^(?:左边)/,/^(?:右边)/,/^(?:上边)/,/^(?:下边)/,/^(?:左方)/,/^(?:右方)/,/^(?:上方)/,/^(?:下方)/,/^(?:左)/,/^(?:右)/,/^(?:上)/,/^(?:下)/,/^(?:中点)/,/^(?:的)/,/^(?:和)/,/^(?:到)/,/^(?:在)/,/^(?:往)/,/^(?:为)/,/^(?:是)/,/^(?:倍)/,/^(?:差)/,/^(?:使得)/,/^(?:使)/,/^(?:且)/,/^(?:等于)/,/^(?:大于)/,/^(?:小于)/,/^(?:红色)/,/^(?:粉色)/,/^(?:紫色)/,/^(?:蓝色)/,/^(?:青色)/,/^(?:蓝绿色)/,/^(?:绿色)/,/^(?:黄色)/,/^(?:橙色)/,/^(?:棕色)/,/^(?:灰色)/,/^(?:蓝灰色)/,/^(?:一个)/,/^(?:它)/,/^(?:形状)/,/^(?:矩形)/,/^(?:箭头)/,/^(?:圆形)/,/^(?:元素)/,/^(?:把)/,/^(?:一点)/,/^(?:分之一)/,/^(?:一)/,/^(?:二)/,/^(?:三)/,/^(?:四)/,/^(?:五)/,/^(?:六)/,/^(?:七)/,/^(?:八)/,/^(?:九)/,/^(?:十)/,/^(?:[\u4e00-\u9fa5A-Za-z]+?(?=[和的到往在为使深浅大小红粉紫蓝青蓝黄橙棕灰色它这那个\n]))/,/^(?:\\n)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = inputParser;
exports.Parser = inputParser.Parser;
exports.parse = function () { return inputParser.parse.apply(inputParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}