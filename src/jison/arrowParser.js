/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var arrowParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,10],$V1=[1,6],$V2=[9,21,22,23,26,72,73,74,75,76,77,78,79,80,81,82,83],$V3=[1,11],$V4=[1,12],$V5=[1,10],$V6=[9,21,22,23,26],$V7=[2,21],$V8=[1,18],$V9=[1,19],$Va=[1,20],$Vb=[1,21],$Vc=[1,22],$Vd=[1,23],$Ve=[1,24],$Vf=[1,25],$Vg=[1,26],$Vh=[1,27],$Vi=[1,28],$Vj=[1,29],$Vk=[7,8,10,13,14],$Vl=[7,8,9,10,13,14,21,22,23,26,72,73,74,75,76,77,78,79,80,81,82,83],$Vm=[1,42],$Vn=[1,40],$Vo=[1,41],$Vp=[1,43],$Vq=[1,39],$Vr=[2,20],$Vs=[8,9,21,22,23,26],$Vt=[7,8,10,13,14,26];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"NEW":4,"CONNECT":5,"object":6,"AND":7,"D":8,"ARROW":9,"EOF":10,"not_ref":11,"FROM":12,"TO":13,"DAO":14,"FILLER":15,"SINGLEONE":16,"ref":17,"THIS":18,"THAT":19,"shape":20,"RECT":21,"CIRCLE":22,"ELEMENT":23,"constValue":24,"color":25,"INPUTTEXT":26,"color_or_not":27,"shape_or_inputText":28,"IT":29,"attribute":30,"SIZE":31,"HEIGHT":32,"WIDTH":33,"COLOR":34,"TEXT":35,"HORILOC":36,"VERTILOC":37,"LOC":38,"SHAPE":39,"computableAttribute":40,"uncomputableAttribute":41,"doubleAttribute":42,"HORIDIST":43,"VERTIDIST":44,"DISTANCE":45,"adverb":46,"DEEP":47,"BIT":48,"SHALLOW":49,"BIG":50,"SMALL":51,"direction":52,"LEFT":53,"RIGHT":54,"UP":55,"DOWN":56,"location":57,"HERE":58,"THERE":59,"MIDDLE":60,"const":61,"ONE":62,"TWO":63,"THREE":64,"FOUR":65,"FIVE":66,"SIX":67,"SEVEN":68,"EIGHT":69,"NINE":70,"TEN":71,"RED":72,"PINK":73,"PURPLE":74,"BLUE":75,"CYAN":76,"TEAL":77,"GREEN":78,"YELLOW":79,"ORANGE":80,"BROWN":81,"GREY":82,"BLUEGREY":83,"value":84,"TIME":85,"FRACTION":86,"DIFF":87,"uncomputableValue":88,"relation":89,"EQUAL":90,"LEQ":91,"GEQ":92,"AT":93,"IS":94,"predicate":95,"MOVE":96,"CHANGE":97,"target":98,"adverbial":99,"WANG":100,"conditions":101,"ALSO":102,"$accept":0,"$end":1},
terminals_: {2:"error",4:"NEW",5:"CONNECT",7:"AND",8:"D",9:"ARROW",10:"EOF",12:"FROM",13:"TO",14:"DAO",16:"SINGLEONE",18:"THIS",19:"THAT",21:"RECT",22:"CIRCLE",23:"ELEMENT",26:"INPUTTEXT",29:"IT",31:"SIZE",32:"HEIGHT",33:"WIDTH",34:"COLOR",35:"TEXT",36:"HORILOC",37:"VERTILOC",38:"LOC",39:"SHAPE",43:"HORIDIST",44:"VERTIDIST",45:"DISTANCE",47:"DEEP",48:"BIT",49:"SHALLOW",50:"BIG",51:"SMALL",53:"LEFT",54:"RIGHT",55:"UP",56:"DOWN",58:"HERE",59:"THERE",60:"MIDDLE",62:"ONE",63:"TWO",64:"THREE",65:"FOUR",66:"FIVE",67:"SIX",68:"SEVEN",69:"EIGHT",70:"NINE",71:"TEN",72:"RED",73:"PINK",74:"PURPLE",75:"BLUE",76:"CYAN",77:"TEAL",78:"GREEN",79:"YELLOW",80:"ORANGE",81:"BROWN",82:"GREY",83:"BLUEGREY",85:"TIME",86:"FRACTION",87:"DIFF",90:"EQUAL",91:"LEQ",92:"GEQ",93:"AT",94:"IS",96:"MOVE",97:"CHANGE",100:"WANG",102:"ALSO"},
productions_: [0,[3,8],[3,8],[3,8],[3,8],[3,8],[3,8],[15,1],[15,0],[11,1],[11,0],[17,1],[17,1],[20,1],[20,1],[20,1],[20,1],[24,1],[24,1],[24,1],[27,1],[27,0],[28,1],[28,1],[28,2],[6,3],[6,3],[6,4],[6,4],[6,1],[6,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[40,1],[40,1],[40,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[42,1],[42,1],[42,1],[46,2],[46,2],[46,2],[46,2],[52,1],[52,1],[52,1],[52,1],[57,1],[57,1],[57,3],[57,5],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[84,4],[84,4],[84,5],[84,5],[84,3],[84,5],[88,3],[89,3],[89,3],[89,3],[89,5],[89,3],[89,3],[95,1],[95,1],[95,1],[98,1],[98,3],[98,5],[99,2],[99,2],[99,2],[99,2],[99,2],[99,3],[99,4],[99,2],[99,2],[99,3],[99,4],[99,1],[101,3],[101,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 3: case 5:
 console.log({"type": "arrow", "obj_1": $$[$0-5], "obj_2": $$[$0-3]});
          return {"type": "arrow", "obj_1": $$[$0-5], "obj_2": $$[$0-3]}; 
break;
case 2: case 4: case 6:
 console.log({"type": "arrow", "obj_1": $$[$0-3], "obj_2": $$[$0-1]});
          return {"type": "arrow", "obj_1": $$[$0-3], "obj_2": $$[$0-1]}; 
break;
case 9: case 10:
this.$ = ""
break;
case 11: case 12:
this.$ = "ref"
break;
case 13:
 this.$ = "rect" 
break;
case 14:
 this.$ = "circle" 
break;
case 15:
 this.$ = "arrow" 
break;
case 16:
 this.$ = "" 
break;
case 17: case 20:
this.$ = {"type": "color", "val": $$[$0]};
break;
case 18:
this.$ = {"type": "shape", "val": $$[$0]};
break;
case 19:
this.$ = {"type": "text", "val": $$[$0]};
break;
case 21:
this.$ = "";
break;
case 22:
this.$ = [{"type": "shape", "val": $$[$0]}];
break;
case 23:
this.$ = [{"type": "text", "val": $$[$0]}];
break;
case 24:
this.$ = [{"type": "shape", "val": $$[$0-1]}, {"type": "text", "val": $$[$0]}];
break;
case 25:
let pos_1 = $$[$0-2] ? _$[$0-2].first_column : ($$[$0-1] ? _$[$0-1].first_column : _$[$0].first_column);
         $$[$0].push($$[$0-1]);
         this.$ = {"type": $$[$0-2], "adj": $$[$0], "pos": pos_1, "end": _$[$0].last_column};
break;
case 26:
let pos_2 = $$[$0-2] ? _$[$0-2].first_column : ($$[$0-1] ? _$[$0-1].first_column : _$[$0].first_column);
         $$[$0].push($$[$0-1]);
         this.$ = {"type": $$[$0-2], "adj": $$[$0], "pos": pos_2, "end": _$[$0].last_column};
break;
case 27:
let pos_3 = $$[$0-3] ? _$[$0-3].first_column : ($$[$0-2] ? _$[$0-2].first_column : _$[$0-1].first_column);
         $$[$0].push({"type": "color", "val": $$[$0-2]});
         this.$ = {"type": $$[$0-3], "adj": $$[$0], "pos": pos_3, "end": _$[$0].last_column};
break;
case 28:
let pos_4 = $$[$0-3] ? _$[$0-3].first_column : ($$[$0-2] ? _$[$0-2].first_column : _$[$0-1].first_column);
         $$[$0].push({"type": "color", "val": $$[$0-2]});
         this.$ = {"type": $$[$0-3], "adj": $$[$0], "pos": pos_4, "end": _$[$0].last_column};
break;
case 29:
this.$ = {"type": "it", "adj": [], "pos": _$[$0].first_column, "end": _$[$0].last_column};
break;
case 30:
this.$ = {"type": $$[$0], "adj": [], "pos": _$[$0].first_column, "end": _$[$0].last_column};
break;
case 31: case 43:
this.$ = "size"
break;
case 32: case 44:
this.$ = "height"
break;
case 33: case 45:
this.$ = "width"
break;
case 34: case 46:
this.$ = "color"
break;
case 35: case 47:
this.$ = "text"
break;
case 36:
this.$ = "horiloc"
break;
case 37:
this.$ = "vertiloc"
break;
case 38: case 42:
this.$ = "loc"
break;
case 39: case 48:
this.$ = "shape"
break;
case 40:
this.$ = "x"
break;
case 41:
this.$ = "y"
break;
case 49:
this.$ = "horidist"
break;
case 50:
this.$ = "vertidist"
break;
case 51:
this.$ = "dist"
break;
case 52:
this.$ = "deep"
break;
case 53:
this.$ = "shallow"
break;
case 54:
this.$ = "big"
break;
case 55:
this.$ = "small"
break;
case 56:
this.$ = "left"
break;
case 57:
this.$ = "right"
break;
case 58:
this.$ = "up"
break;
case 59:
this.$ = "down"
break;
case 60:
this.$ = {"loc": "here", "type": "ref", "pos": _$[$0].first_column, "end": _$[$0].last_column}
break;
case 61:
this.$ = {"loc": "there", "type": "ref", "pos": _$[$0].first_column, "end": _$[$0].last_column}
break;
case 62:
this.$ = {"obj": $$[$0-2], "type": "single", "direction": $$[$0]}
break;
case 63:
this.$ = {"obj_1": $$[$0-4], "obj_2": $$[$0-2], "type": "double", "loc": "middle"}
break;
case 64:
this.$ = 1
break;
case 65:
this.$ = 2
break;
case 66:
this.$ = 3
break;
case 67:
this.$ = 4
break;
case 68:
this.$ = 5
break;
case 69:
this.$ = 6
break;
case 70:
this.$ = 7
break;
case 71:
this.$ = 8
break;
case 72:
this.$ = 9
break;
case 73:
this.$ = 10
break;
case 74:
 this.$ = "red" 
break;
case 75:
 this.$ = "pink" 
break;
case 76:
 this.$ = "purple" 
break;
case 77:
 this.$ = "blue" 
break;
case 78:
 this.$ = "cyan" 
break;
case 79:
 this.$ = "teal" 
break;
case 80:
 this.$ = "green" 
break;
case 81:
 this.$ = "yellow" 
break;
case 82:
 this.$ = "orange" 
break;
case 83:
 this.$ = "brown" 
break;
case 84:
 this.$ = "grey" 
break;
case 85:
 this.$ = "bluegrey" 
break;
case 86:
this.$ = {"val": $$[$0-3], "const": $$[$0-1], "type": "time"};
break;
case 87:
this.$ = {"val": $$[$0-3], "const": $$[$0-1], "type": "fraction"};
break;
case 88:
this.$ = {"val_1": $$[$0-4], "val_2": $$[$0-2], "type": "diff"};
break;
case 89:
this.$ = {"val_1": $$[$0-4], "val_2": $$[$0-2], "type": "sum"};
break;
case 90: case 92: case 103:
this.$ = {"obj": $$[$0-2], "type": "single", "val": $$[$0]};
break;
case 91: case 104:
this.$ = {"obj_1": $$[$0-4], "obj_2": $$[$0-2], "type": "double", "val": $$[$0]};
break;
case 93:
this.$ = {"type": "equation", "val_1": $$[$0-2], "val_2": $$[$0], "op": "="};
break;
case 94:
this.$ = {"type": "equation", "val_1": $$[$0-2], "val_2": $$[$0], "op": "<"};
break;
case 95:
this.$ = {"type": "equation", "val_1": $$[$0-2], "val_2": $$[$0], "op": ">"};
break;
case 96:
this.$ = {"type": "direction", "obj_1": $$[$0-4], "obj_2": $$[$0-2], "direction": $$[$0]};
break;
case 97: case 98:
this.$ = {"type": "assignment", "left_value": $$[$0-2], "right_value": $$[$0]};
break;
case 99:
this.$ = "new";
break;
case 100:
this.$ = "move";
break;
case 101:
this.$ = "change";
break;
case 102:
this.$ = {"obj": $$[$0], "type": "single", "val": "loc"};
break;
case 105: case 106:
this.$ = {"type": "loc", "loc": $$[$0]};
break;
case 107:
this.$ = {"type": "direction", "direction": $$[$0]};
break;
case 108: case 112:
this.$ = {"type": "computable", "value": $$[$0]};
break;
case 109: case 113:
this.$ = {"type": "uncomputable", "value": $$[$0]};
break;
case 110: case 114:
this.$ = {"type": "color", "value": $$[$0]};
break;
case 111: case 115:
this.$ = {"type": "text", "value": $$[$0]};
break;
case 116:
this.$ = {"type": "adverb", "value": $$[$0]};
break;
case 117:
 $$[$0-2].push($$[$0]);
          this.$ = $$[$0-2]; 
break;
case 118:
 this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:[1,3],9:$V0,11:4,12:[1,5],16:$V1},o($V2,$V0,{6:7,11:8,17:9,16:$V1,18:$V3,19:$V4,29:$V5}),{9:[1,13]},o($V2,$V0,{11:8,17:9,6:14,16:$V1,18:$V3,19:$V4,29:$V5}),o($V2,[2,9]),{7:[1,15]},o($V6,$V7,{27:16,25:17,72:$V8,73:$V9,74:$Va,75:$Vb,76:$Vc,77:$Vd,78:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj}),o($Vk,[2,30],{27:30,25:31,9:$V7,21:$V7,22:$V7,23:$V7,26:$V7,72:$V8,73:$V9,74:$Va,75:$Vb,76:$Vc,77:$Vd,78:$Ve,79:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj}),o($Vk,[2,29]),o($Vl,[2,11]),o($Vl,[2,12]),{5:[1,32],12:[1,33]},{13:[1,34],14:[1,35]},o($V2,$V0,{11:8,17:9,6:36,16:$V1,18:$V3,19:$V4,29:$V5}),{9:$Vm,20:38,21:$Vn,22:$Vo,23:$Vp,26:$Vq,28:37},o($V6,$Vr,{8:[1,44]}),o($Vs,[2,74]),o($Vs,[2,75]),o($Vs,[2,76]),o($Vs,[2,77]),o($Vs,[2,78]),o($Vs,[2,79]),o($Vs,[2,80]),o($Vs,[2,81]),o($Vs,[2,82]),o($Vs,[2,83]),o($Vs,[2,84]),o($Vs,[2,85]),{9:$Vm,20:38,21:$Vn,22:$Vo,23:$Vp,26:$Vq,28:45},o($V6,$Vr,{8:[1,46]}),o($V2,$V0,{11:8,17:9,6:47,16:$V1,18:$V3,19:$V4,29:$V5}),o($V2,$V0,{11:8,17:9,6:48,16:$V1,18:$V3,19:$V4,29:$V5}),o($V2,$V0,{11:8,17:9,6:49,16:$V1,18:$V3,19:$V4,29:$V5}),o($V2,$V0,{11:8,17:9,6:50,16:$V1,18:$V3,19:$V4,29:$V5}),{8:[1,51]},o($Vk,[2,25]),o($Vk,[2,22],{26:[1,52]}),o($Vk,[2,23]),o($Vt,[2,13]),o($Vt,[2,14]),o($Vt,[2,15]),o($Vt,[2,16]),{9:$Vm,20:38,21:$Vn,22:$Vo,23:$Vp,26:$Vq,28:53},o($Vk,[2,26]),{9:$Vm,20:38,21:$Vn,22:$Vo,23:$Vp,26:$Vq,28:54},{7:[1,55]},{13:[1,56],14:[1,57]},{8:[1,58]},{8:[1,59]},{9:[1,60]},o($Vk,[2,24]),o($Vk,[2,27]),o($Vk,[2,28]),o($V2,$V0,{11:8,17:9,6:61,16:$V1,18:$V3,19:$V4,29:$V5}),o($V2,$V0,{11:8,17:9,6:62,16:$V1,18:$V3,19:$V4,29:$V5}),o($V2,$V0,{11:8,17:9,6:63,16:$V1,18:$V3,19:$V4,29:$V5}),{9:[1,64]},{9:[1,65]},{10:[1,66]},{10:[1,67]},{10:[1,68]},{10:[1,69]},{10:[1,70]},{10:[1,71]},{1:[2,1]},{1:[2,2]},{1:[2,4]},{1:[2,6]},{1:[2,3]},{1:[2,5]}],
defaultActions: {66:[2,1],67:[2,2],68:[2,4],69:[2,6],70:[2,3],71:[2,5]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 4
break;
case 2:return 4
break;
case 3:return 96
break;
case 4:return 97
break;
case 5:return 97
break;
case 6:return 18
break;
case 7:return 19
break;
case 8:return 58
break;
case 9:return 59
break;
case 10:return 31
break;
case 11:return 32
break;
case 12:return 33
break;
case 13:return 34
break;
case 14:return 35
break;
case 15:return 35
break;
case 16:return 36
break;
case 17:return 37
break;
case 18:return 38
break;
case 19:return 43
break;
case 20:return 44
break;
case 21:return 45
break;
case 22:return 47
break;
case 23:return 49
break;
case 24:return 50
break;
case 25:return 51
break;
case 26:return 53
break;
case 27:return 54
break;
case 28:return 55
break;
case 29:return 56
break;
case 30:return 53
break;
case 31:return 54
break;
case 32:return 55
break;
case 33:return 56 
break;
case 34:return 53
break;
case 35:return 54
break;
case 36:return 55
break;
case 37:return 56 
break;
case 38:return 60 
break;
case 39:return 8
break;
case 40:return 7
break;
case 41:return 14
break;
case 42:return 93
break;
case 43:return 100
break;
case 44:return 94
break;
case 45:return 94
break;
case 46:return 94
break;
case 47:return 85
break;
case 48:return 87
break;
case 49:return 'FOR'
break;
case 50:return 'FOR'
break;
case 51:return 102
break;
case 52:return 90
break;
case 53:return 92
break;
case 54:return 91
break;
case 55:return 72
break;
case 56:return 73
break;
case 57:return 74
break;
case 58:return 75
break;
case 59:return 76
break;
case 60:return 77
break;
case 61:return 78
break;
case 62:return 79
break;
case 63:return 80
break;
case 64:return 81
break;
case 65:return 82
break;
case 66:return 83
break;
case 67:return 16
break;
case 68:return 29
break;
case 69:return 39
break;
case 70:return 21
break;
case 71:return 9
break;
case 72:return 22
break;
case 73:return 23
break;
case 74:return 'LET'
break;
case 75:return 5
break;
case 76:return 12
break;
case 77:return 13
break;
case 78:return 48
break;
case 79:return 86
break;
case 80:return 62
break;
case 81:return 63
break;
case 82:return 64
break;
case 83:return 65
break;
case 84:return 66
break;
case 85:return 67
break;
case 86:return 68
break;
case 87:return 69
break;
case 88:return 70
break;
case 89:return 71
break;
case 90:return 26
break;
case 91:return 'BREAK_LINE'
break;
case 92:return 10
break;
case 93:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:新建)/,/^(?:画)/,/^(?:移动)/,/^(?:修改)/,/^(?:改)/,/^(?:这个)/,/^(?:那个)/,/^(?:这里)/,/^(?:那里)/,/^(?:大小)/,/^(?:高度)/,/^(?:宽度)/,/^(?:颜色)/,/^(?:文字)/,/^(?:文本)/,/^(?:水平位置)/,/^(?:竖直位置)/,/^(?:位置)/,/^(?:水平距离)/,/^(?:竖直距离)/,/^(?:距离)/,/^(?:深)/,/^(?:浅)/,/^(?:大)/,/^(?:小)/,/^(?:左边)/,/^(?:右边)/,/^(?:上边)/,/^(?:下边)/,/^(?:左方)/,/^(?:右方)/,/^(?:上方)/,/^(?:下方)/,/^(?:左)/,/^(?:右)/,/^(?:上)/,/^(?:下)/,/^(?:中点)/,/^(?:的)/,/^(?:和)/,/^(?:到)/,/^(?:在)/,/^(?:往)/,/^(?:为)/,/^(?:是)/,/^(?:成)/,/^(?:倍)/,/^(?:差)/,/^(?:使得)/,/^(?:使)/,/^(?:且)/,/^(?:等于)/,/^(?:大于)/,/^(?:小于)/,/^(?:红色)/,/^(?:粉色)/,/^(?:紫色)/,/^(?:蓝色)/,/^(?:青色)/,/^(?:蓝绿色)/,/^(?:绿色)/,/^(?:黄色)/,/^(?:橙色)/,/^(?:棕色)/,/^(?:灰色)/,/^(?:蓝灰色)/,/^(?:一个)/,/^(?:它)/,/^(?:形状)/,/^(?:矩形)/,/^(?:箭头)/,/^(?:圆形)/,/^(?:元素)/,/^(?:把)/,/^(?:连接)/,/^(?:从)/,/^(?:指向)/,/^(?:一点)/,/^(?:分之一)/,/^(?:一)/,/^(?:二)/,/^(?:三)/,/^(?:四)/,/^(?:五)/,/^(?:六)/,/^(?:七)/,/^(?:八)/,/^(?:九)/,/^(?:十)/,/^(?:[\u4e00-\u9fa5A-Za-z0123456789]+?(?=[和的到往在为使深浅大小红粉紫蓝青蓝黄橙棕灰色它这那个指向\n]))/,/^(?:\\n)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = arrowParser;
exports.Parser = arrowParser.Parser;
exports.parse = function () { return arrowParser.parse.apply(arrowParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}